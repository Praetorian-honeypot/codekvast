apply plugin: 'application'
apply plugin: 'spring-boot'
apply from: "$rootDir/gradle/java-8.gradle"

description = "The Codekvast Promotion Web"
archivesBaseName = "codekvast-web"
version = project.parent.version
mainClassName = "se.crisp.codekvast.web.CodekvastPromoWebApplication"

configurations {
    springLoaded
}

dependencies {
    compile lombok
    compile 'com.google.guava:guava:18.0'

    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile h2database
    compile 'org.flywaydb:flyway-core'
    compile 'com.ecwid:ecwid-mailchimp:2.0.1.0'
    compile 'net.sourceforge.pjl-comp-filter:pjl-comp-filter:1.7'

    runtime project(':product:support:websupport')
    runtime 'ch.qos.logback:logback-classic'
    runtime 'org.webjars:headjs:1.0.3'
    runtime 'org.webjars:jquery:2.1.4'
    runtime 'org.webjars:angularjs:1.4.7'
    runtime 'org.webjars:angular-ui-bootstrap:0.14.3'
    runtime 'org.webjars:bootstrap:3.3.5'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'

    springLoaded springLoadedAgent
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/default.properties'
        filter(ReplaceTokens, tokens: gitVersionTokens + ['gradle.name': archivesBaseName,
                                                          'gradle.description': project.description,
                                                          'gradle.version'    : project.version]
        )
    }
}

applicationDistribution.from("src/main/resources") {
    into "conf"
    include "default.properties"
    rename { "${it}.default" }

    // Hide lines starting with info.build.
    filter { line ->
        line.startsWith('info.build.') ? "" : line
    }
}

startScripts {
    doLast {
        outputs.files.each { scriptDir ->
            scriptDir.eachFile { script ->
                logger.info "Adjusting CLASSPATH in {} to start with \$APP_HOME/conf/ ...", script.name
                script.text = script.text.replace('CLASSPATH=$APP_HOME/lib', 'CLASSPATH=$APP_HOME/conf/:$APP_HOME/lib')
            }
        }
    }
}

run {
    jvmArgs = ['-ea']

    args = ["--logging.file=$buildDir/log/${applicationName}.log"]
}

bootRun {
    jvmArgs = [
            "-javaagent:${configurations.springLoaded.asPath}",
            "-noverify",
            "-Dspring.thymeleaf.cache=false",
            "-Dspring.messages.cacheSeconds=1"
    ] + run.jvmArgs

    args = run.args
}
