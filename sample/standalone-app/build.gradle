plugins {
    id 'java'
    id 'application'
    id 'com.ofg.uptodate' version "1.1.0"
}

mainClassName = "sample.app.SampleApp"
archivesBaseName = "standalone-app"

sourceCompatibility = 1.6

dependencies {
    compile "org.projectlombok:lombok:1.16.2"
    compile "org.slf4j:slf4j-api:1.7.7"
    compile "aopalliance:aopalliance:1.0"
    compile 'com.google.inject:guice:3.0'
}

task generateCodekvastConfig {
    group "Build"
    description "Generates a codekvast.conf for test"

    ext.configFile = file("$buildDir/codekvast.conf")

    inputs.file file("build.gradle")
    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """# Run Codekvast against Crisp Sample App
appName = $archivesBaseName
appVersion = $version
tags = development, sample
codeBase = ${file("build/install/${project.name}/lib/")}
packagePrefixes = sample. , foo.bar.
methodVisibility = all
serverUri = http://localhost:8090
apiAccessID = agent
apiAccessSecret = 0000
collectorResolutionSeconds = 2
serverUploadIntervalSeconds = 10
aspectjOptions = -verbose -showWeaveInfo
clobberAopXml = true
verbose = true
"""
    }
}

processResources.dependsOn generateCodekvastConfig

configurations { aspectj }
dependencies { aspectj 'org.aspectj:aspectjweaver:1.8.2' }

run {
    dependsOn = [":product:agent:collector:shadowJar", "generateCodekvastConfig"]
    def codekvastCollector = tasks.getByPath(":product:agent:collector:shadowJar").outputs.files.asPath
    def aspectjWeaver = configurations.aspectj.asPath

    jvmArgs = [
            "-Dcodekvast.configuration=$generateCodekvastConfig.configFile",
            "-javaagent:$codekvastCollector",
            "-javaagent:$aspectjWeaver"
    ]
}
