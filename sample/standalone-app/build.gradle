plugins {
    id 'java'
    id 'application'
    id 'com.ofg.uptodate' version "1.1.0"
}

mainClassName = "sample.app.SampleApp"
archivesBaseName = "standalone-app"

sourceCompatibility = 1.6

dependencies {
    compile "org.projectlombok:lombok:1.12.6"
    compile "org.slf4j:slf4j-api:1.7.7"
    compile "aopalliance:aopalliance:1.0"
    compile 'com.google.inject:guice:3.0'
}

task generateCodekvastConfig {
    group "Build"
    description "Generates a codekvast.conf for test"

    ext.configFile = file("build/libs/codekvast.conf")

    inputs.file file("$projectDir/build.gradle")
    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """# Run Codekvast against Crisp Sample App
customerName = Crisp
appName = $archivesBaseName
appVersion = $version
environment = development
codeBaseUri = file:${file("build/install/${project.name}/lib/")}
packagePrefix = sample.
dataPath = $rootDir/sample/build/codekvast
serverUri = http://localhost:8080
apiAccessID = agent
apiAccessSecret = 0000
collectorResolutionSeconds = 2
serverUploadIntervalSeconds = 10
aspectjOptions = -verbose -showWeaveInfo
verbose = true
"""
    }
}

processResources.dependsOn generateCodekvastConfig

run {
    dependsOn = [":product:agent:collector:assemble", "generateCodekvastConfig"]
    def codekvastCollector = tasks.getByPath(":product:agent:collector:shadowJar").outputs.files.asPath
    jvmArgs = ["-javaagent:$codekvastCollector=$generateCodekvastConfig.configFile"]
}
