apply plugin: 'java'
apply plugin: 'application'

mainClassName = "sample.app.SampleApp"
archivesBaseName = "standalone-app"

sourceCompatibility = 1.6

dependencies {
    compile libs['lombok']
    compile libs['slf4j-api']
    compile "aopalliance:aopalliance:1.0"
    compile 'com.google.inject:guice:3.0'
}

task generateDuckConfig {
    group "Build"
    description "Generates a duck.properties for test"

    ext.configFile = file("build/libs/duck.properties")

    inputs.file file("$projectDir/build.gradle")
    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """# Run Duck against Crisp Sample App
customerName = Crisp
appName = $archivesBaseName
environment = development
codeBaseName = sample
codeBaseUri = file:${file("build/install/${project.name}/lib/")}
packagePrefix = sample
dataPath = ${file("$buildDir/duck")}
serverUri = http://localhost:8080
sensorResolutionIntervalSeconds = 10
serverUploadIntervalMillis = 5000
aspectjOptions = -verbose -showWeaveInfo
verbose = true
"""
    }
}

processResources.dependsOn generateDuckConfig

run {
    dependsOn = [":product:agent:sensor:assemble", "generateDuckConfig"]
    def duckSensor = tasks.getByPath(":product:agent:sensor:shadowJar").outputs.files.asPath
    jvmArgs = ["-javaagent:$duckSensor=$generateDuckConfig.configFile"]
}
