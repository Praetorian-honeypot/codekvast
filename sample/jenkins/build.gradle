plugins {
    id 'java'
}

sourceSets {
    javaagent
}

dependencies {

}

ext.tomcatVersion = "7.0.59"
ext.tomcatDownloadUrl = "http://apache.mirrors.spacedump.net/tomcat/tomcat-7/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip"
ext.tomcatDir = file("$buildDir/tomcat")
ext.catalinaBase = file("$tomcatDir/apache-tomcat-${tomcatVersion}")

ext.jenkinsVersion = "1.598"
ext.jenkinsDownloadUrl = "http://mirrors.jenkins-ci.org/war/${jenkinsVersion}/jenkins.war"

task installJenkinsInTomcat7 {
    def downloadDir = file("$buildDir/tmp/download")
    def webappsDir = new File(catalinaBase, "webapps")
    def jenkinsDir = new File(webappsDir, "jenkins")

    inputs.property "tomcatVersion", tomcatVersion
    inputs.property "tomcat", tomcatDownloadUrl
    inputs.property "jenkinsVersion", jenkinsVersion
    inputs.property "jenkins", jenkinsDownloadUrl
    inputs.file file("build.gradle")
    outputs.dir tomcatDir

    doLast {
        downloadDir.mkdirs()
        webappsDir.mkdirs()

        logger.lifecycle "Downloading $tomcatDownloadUrl ..."
        ant.get(
                src: tomcatDownloadUrl,
                dest: downloadDir,
                usetimestamp: true,
                verbose: true
        )

        logger.lifecycle "Unpacking Tomcat into $tomcatDir ..."
        copy {
            from zipTree("$downloadDir/apache-tomcat-${tomcatVersion}.zip")
            into tomcatDir
        }
        exec { commandLine "chmod", "+x", "$catalinaBase/bin/catalina.sh" }

        logger.lifecycle "Downloading $jenkinsDownloadUrl into $webappsDir ..."
        ant.get(
                src: jenkinsDownloadUrl,
                dest: webappsDir,
                usetimestamp: true,
                verbose: true
        )

        if (jenkinsDir.exists()) {
            logger.lifecycle "Deleting old exploded jenkins dir..."
            delete jenkinsDir
        }
    }
}

task generateCodekvastConfig {
    group "Build"
    description "Generates a codekvast.conf for test"

    ext.configFile = file("$buildDir/codekvast.conf")

    inputs.file file("build.gradle")
    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """# Run Codekvast against Jenkins in Tomcat
dataPath=/tmp/codekvast
appName = Jenkins
appVersion = manifest jenkins-cli.*\\\\.jar Jenkins-CLI-Version
tags = development, sample
codeBase = $catalinaBase/webapps/jenkins, file:${System.properties['user.home']}/.jenkins/plugins
packagePrefixes = hudson, jenkins
serverUri = http://localhost:8090
collectorResolutionSeconds = 10
#aspectjOptions = -verbose -showWeaveInfo
aspectjOptions = -verbose
clobberAopXml = true
verbose = true
"""
    }
}

processResources.dependsOn generateCodekvastConfig

task generateTomcatRunHook {
    description = "Generates a setenv.sh in \$CATALINA_HOME/bin that hooks up Codekvast"
    group = "build"
    dependsOn = [":product:agent:collector:javaagents", "installJenkinsInTomcat7", "generateCodekvastConfig"]
    def codekvastCollector = tasks.getByPath(":product:agent:collector:shadowJar").outputs.files.singleFile
    def aspectjWeaver = findProject(":product:agent:collector").configurations.aspectjweaver.files.path.join('')
    def setenvFile = file("$catalinaBase/bin/setenv.sh")

    inputs.file file("build.gradle")
    outputs.file setenvFile

    doLast {
        println """---------------------------
codekvastCollector = ${codekvastCollector}
aspectjWeaver = $aspectjWeaver
-------------------------"""
        setenvFile.text = """
CATALINA_OPTS=\"-Dcodekvast.configuration=$generateCodekvastConfig.configFile -javaagent:$codekvastCollector -javaagent:$aspectjWeaver\"
"""
    }
}

task run(type: Exec) {
    description = "Run Jenkins with Codekvast Collector attached"
    group = "application"
    dependsOn generateTomcatRunHook
    commandLine "$catalinaBase/bin/catalina.sh", "run"
}
