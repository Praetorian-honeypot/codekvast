apply plugin: 'war'
apply plugin: 'jetty'

sourceCompatibility = 1.5
archivesBaseName = "sample-jsp"

ext.codekvastDataPath = "/tmp/codekvast/agent/Crisp/" + archivesBaseName

task generateCodeKvastConfig {
    group = "Build"
    description = "Generates a codekvast.properties for test"

    ext.configFile = file("build/libs/codekvast.properties")

    inputs.file file("$projectDir/build.gradle")
    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """# Run CodeKvast against Crisp Sample Vanilla JSP app
customerName = Crisp
appName = $archivesBaseName
appVersion = $version
environment = development
codeBaseName = sample
codeBaseUri = file:/maven/${archivesBaseName}.war
dataPath = $codekvastDataPath
packagePrefix = sample
serverUri = http://localhost:8080
sensorResolutionIntervalSeconds = 10
serverUploadIntervalMillis = 5000
aspectjOptions = -verbose -showWeaveInfo
verbose = true
"""
    }
}

assemble.dependsOn generateCodeKvastConfig

task dockerRunWarInTomcat7(type: Exec) {
    def tomcatVersion = "tomcat-7.0"
    def port = 8080

    description = "Deploys $project.name to $tomcatVersion inside a Docker container, access it at http://localhost:$port/$project.name"
    group = "Web application"
    dependsOn "assemble", ":product:agent:sensor:assemble"

    def codekvastSensor = new File(tasks.getByPath(":product:agent:sensor:shadowJar").outputs.files.asPath)

    executable = "docker"
    args = ["run", "--rm",
            "-v", "$codekvastDataPath:$codekvastDataPath",
            "-v", "$buildDir/libs:/maven",
            "-v", "$codekvastSensor.parentFile:/codekvast",
            "-e", "JAVA_OPTS=-javaagent:/codekvast/$codekvastSensor.name=/maven/codekvast.properties",
            "-e", "LANG=C.UTF-8",
            "-p", "$port:8080",
            "jolokia/$tomcatVersion",
    ]

    doFirst {
        new File(codekvastDataPath).mkdirs()
        logger.lifecycle description
        logger.info "{} {}", executable, args.join(" ")
    }
}
