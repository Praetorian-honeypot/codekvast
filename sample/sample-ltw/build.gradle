description 'Illustrates how to use Codekvast Collector together with AspectJ load-time weaver (LTW)'

apply from: "$rootDir/gradle/java-7.gradle"
apply plugin: 'application'

mainClassName = "sample.app.SampleApp"

configurations {
    aspectjweaver
    collector
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.16.6"
    compile "org.slf4j:slf4j-api:1.7.12"
    compile "aopalliance:aopalliance:1.0"
    compile 'com.google.inject:guice:4.0'
    compile project(":sample:sample-lib")

    runtime logback

    aspectjweaver "org.aspectj:aspectjweaver:1.8.7"
    collector project(path: ":product:java-agent", configuration: 'shadow')
}

task generateCodekvastConfig {
    group "Build"
    description "Generates a codekvast.conf for test"

    def configFile = file("$buildDir/codekvast.conf")

    inputs.file file("build.gradle")
    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """# Run Codekvast against Sample App
appName = $archivesBaseName
appVersion = 1.3
aspectjOptions = -verbose -showWeaveInfo
clobberAopXml = true
codeBase = ${file("build/install/${project.name}/lib/")}
collectorResolutionSeconds = 2
excludePackages = sample.lib.excluded
methodVisibility = all
packages = sample. , foo.bar.
tags = development, sample
"""
    }
}

processResources.dependsOn generateCodekvastConfig
run {
    dependsOn installDist, generateCodekvastConfig, ':product:java-agent:shadowJar'

    jvmArgs = [
            "-Dcodekvast.configuration=$generateCodekvastConfig.outputs.files.asPath",
            "-javaagent:$configurations.collector.asPath",
            "-javaagent:$configurations.aspectjweaver.asPath",
            "-Djava.ext.dirs=$configurations.collector.asPath"
    ]
}
