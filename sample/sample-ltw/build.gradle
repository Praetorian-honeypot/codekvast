description 'Illustrates how to use Codekvast Collector together with AspectJ load-time weaver (LTW)'

apply from: "$rootDir/gradle/java-6.gradle"
apply plugin: 'application'

mainClassName = "sample.app.SampleApp"

configurations {
    javaagent
}

dependencies {
    compile "org.projectlombok:lombok:1.16.6"
    compile "org.slf4j:slf4j-api:1.7.12"
    compile "aopalliance:aopalliance:1.0"
    compile 'com.google.inject:guice:4.0'
    compile project(":sample:sample-lib")

    javaagent project(path: ":product:agent:collector", configuration: 'shadow')
    javaagent "org.aspectj:aspectjweaver:1.8.7"
}

task generateCodekvastConfig {
    group "Build"
    description "Generates a codekvast.conf for test"

    ext.configFile = file("$buildDir/codekvast.conf")

    inputs.file file("build.gradle")
    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """# Run Codekvast against Crisp Benchmark App
appName = $archivesBaseName
appVersion = 1.3
aspectjOptions = -verbose -showWeaveInfo
clobberAopXml = true
codeBase = ${file("build/install/${project.name}/lib/")}
collectorResolutionSeconds = 2
methodVisibility = all
packages = sample. , foo.bar.
excludePackages = foo.bar.excluded
tags = development, sample
verbose = true
"""
    }
}

processResources.dependsOn generateCodekvastConfig

task fetchJavaAgents(type: Sync) {
    from configurations.javaagent
    into "$buildDir/javaagent"
}

run {
    dependsOn = [fetchJavaAgents, generateCodekvastConfig]

    def codekvastCollector = file("$buildDir/javaagent").listFiles().find { it.name.startsWith("codekvast") }
    def aspectjWeaver = file("$buildDir/javaagent").listFiles().find { it.name.startsWith("aspectjweaver") }

    jvmArgs = [
            "-Dcodekvast.configuration=$generateCodekvastConfig.configFile",
            "-javaagent:$codekvastCollector",
            "-javaagent:$aspectjWeaver"
    ]
}
