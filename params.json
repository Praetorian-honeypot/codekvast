{
  "name": "Codekvast",
  "tagline": "Codekvast, the Truly Dead Code Detector",
  "body": "# Codekvast - the Truly Dead Code Detector\r\n\r\n## Overview\r\n\r\nCodekvast detects **Truly Dead Code** in **Java-applications**.\r\n\r\nBy *Truly Dead Code* we mean code that is in production, but *has not been used by anyone for a certain period of time*.\r\n\r\nCodekvast works by attaching the **Codekvast Collector** to your application.\r\nThe collector records the instant when methods belonging to any of your packages are invoked. \r\n\r\nBy default Codekvast tracks *public* and *protected* methods. Modern IDEs like IntelliJ IDEA can detect dead code which have *package \r\nprivate* or *private* visibility. They can never know what callers there are to public and protected methods though.\r\n \r\nThis is where Codekvast can help. Codekvast *records when your methods are invoked in production*.\r\n\r\nThe collector periodically sends the recorded data to the **Codekvast Daemon**, which combines the invocation data\r\nwith an inventory of *all* methods in your application. (It's the methods that *not* have been invoked recently that\r\nconstitutes Truly Dead Code, remember?)\r\n \r\nThe Codekvast Daemon is installed in the same host as your application, since it needs access to your application's binaries\r\n (jar files) to make the inventory.\r\n\r\nThe Codekvast Daemon periodically produces a zip file containing both the method inventory and the collected invocation data.\r\n\r\nThe zip files from all daemons should be transferred to a central **Codekvast Warehouse**, which aggregates the data, and makes\r\nit available to users in a web interface.\r\n\r\nThe Codekvast Daemon can be configured to automatically upload the zip files to the warehouse by means of SCP. If SCP is not an option,\r\nthe zip files must be transferred manually somehow.\r\n\r\nBy using the Codekvast Warehouse, you can find out whether a certain method, class or package is safe to remove or not.\r\n\r\n*Codekvast collects the data. You then combine that with your domain knowledge to make informed decisions about what is truly dead code\r\nthat safely could be deleted.*\r\n\r\n### Performance\r\n\r\nCodekvast Collector is extremely efficient. It adds approximately *15 ns* to each method invocation. If this is unacceptable,\r\nyou can exclude certain time critical packages from collection.\r\n\r\nThe collected data volumes are quite moderate. When tested on a telecom equipment vendors' fairly large network management application,\r\nthe local database maintained by Codekvast Daemon occupies less than 200 MB disk space.\r\n\r\nThe zip file for that case weighs less than 3 MB. \r\n\r\n## License\r\n\r\nCodekvast is released under the MIT license.\r\n\r\n## Development Status\r\n\r\n* The Codekvast Collector is fairly complete and stable.\r\n\r\n    Tentative road-map:\r\n    \r\n    1. Mechanism for delivering collected data to the daemon over a TCP socket instead of text files in the local file system. This will\r\n    make it possible to use Codekvast in e.g., Heroku and Google App Engine. \r\n    \r\n* The Codekvast Daemon is fairly stable.\r\n\r\n    Tentative Road-map:\r\n\r\n    1. Add a mechanism for pruning the local database once data has been delivered to the warehouse.\r\n    1. Add a mechanism for receiving collected data from the collectors using TCP sockets.\r\n    1. Add other mechanisms than scp for delivering data to the central warehouse.\r\n    1. Add devops stuff. (ping, health checks, JMX, metrics, ...)\r\n    \r\n* The Codekvast Warehouse is **very** rudimentary. It aggregates and persists data alright, but the user interface is absent. (For the moment\r\nthe only functionality offered is a view in the database schema).\r\n\r\n    Tentative road-map:\r\n    \r\n     1. Add a web UI.\r\n     1. Add a IDE plugin API.\r\n     1. Add a mechanism for informing daemons that they safely can prune data.\r\n     1. Add more mechanisms for receiving data from daemons (currently supported: zip files, optionally pushed by scp).  \r\n\r\n*NOTE:* the collector and the daemon communicates via the local file system. This means that Codekvast for the moment is unusable in e.g., Heroku and\r\nGoogle App Engine.\r\n\r\n## How To Kick The Tyres\r\n\r\nThe following procedure will download and start two different versions of Jenkins and launch them in Tomcat 7, with Codekvast Collector attached.\r\nIt will also build and start Codekvast Daemon and Codekvast Warehouse.\r\n\r\n1. Install **JDK 8** (OpenJDK or Oracle are fine.) \r\n\r\n1. Install [Docker Engine](https://docs.docker.com/engine/installation/) and [Docker Compose](https://docs.docker.com/compose/install/)\r\n\r\n1. Open a terminal window\r\n\r\n1. Do `git clone https://github.com/crispab/codekvast.git && cd codekvast`\r\n\r\n1. Open 4 more terminal windows or tabs with `codekvast` as working directory.\r\n\r\n1. In terminal window #1 do `./gradlew :sample:jenkins1:run`\r\n\r\n    This will download and start Jenkins inside Tomcat with Codekvast Collector attached.\r\n    \r\n    You can access Jenkins #1 at http://localhost:8081/jenkins\r\n\r\n    _NOTE:_ The download of jenkins.war could take some time. Be patient!\r\n    \r\n1. In terminal window #2 do `./gradlew :sample:jenkins2:run`\r\n   \r\n    Downloads and starts another version of Jenkins inside another Tomcat also with Codekvast Collector attached.\r\n    \r\n    You can access Jenkins #2 at http://localhost:8082/jenkins\r\n    \r\n1. In terminal window #3 do `./gradlew :product:warehouse:distDocker`\r\n \r\n    This will build a local Docker image for Codekvast Warehouse from the sources.\r\n    \r\n1. In terminal window #3 do `docker-compose -f product/warehouse/docker-compose.yml up`\r\n\r\n    This will launch two Docker containers: **codekvast-database** (MariaDB) and **codekvast-warehouse** (the Codekvast Warehouse app).\r\n    \r\n    The warehouse app is configured to look for zip files in /tmp/codekvast/.warehouse and import them into the MariaDB database.\r\n    \r\n1. In terminal window #4 do `sudo chmod o+rw /tmp/codekvast/.warehouse` or else the Codekvast Daemon cannot create it's zip files there.\r\n    \r\n1. In terminal window #4 do `./gradlew :product:agent:daemon:run`\r\n\r\n    This will launch **Codekvast daemon**, that will process output from the collectors attached to the two Jenkins instances.\r\n    \r\n    The daemon will regularly produce zip data files in /tmp/codekvast/.warehouse (where Codekvast Warehouse will find and consume them).\r\n    \r\n1. In terminal window #5 do `docker exec -ti codekvast-database mysql -ucodekvast -pcodekvast codekvast_warehouse`\r\n\r\n    Examine the collected data by means of `SELECT * FROM MethodInvocations1;`\r\n    \r\n    Examine the view with `DESCRIBE MethodInvocations1;`\r\n\r\n1. In each terminal window press `Ctrl-C`to terminate.\r\n\r\n### Pre-built binaries and Docker Compose recipes\r\n\r\nPre-built binaries, a User Manual and Docker Compose files are available for download from [Codekvast at Bintray](https://bintray.com/crisp/codekvast/distributions/view#files)\r\n\r\n* codekvast-daemon-x.x.x.zip contains the *Codekvast Collector* and the *Codekvast Daemon*.\r\n\r\n* codekvast-warehouse-x.x.x.zip contains *Codekvast Warehouse* as a regular Linux System-V service. Install MariaDB separately.\r\n\r\n* docker-compose-x.x.x.yml is a Docker Compose file for running Codekvast Warehouse and MariaDB as Docker images.\r\n\r\n* CodekvastUserManual-x.x.x.html is a complete User Manual for all three components. It contains installation and configuration guides.\r\n\r\n* RELEASE-NOTES-x.x.x.md contains release notes.\r\n\r\n## Development Guide\r\n\r\nIf you have read this far, you're probably eager to do some Codekvast development. Welcome!\r\n\r\n### Technology Stack\r\n\r\nThe following stack is used when developing Codekvast:\r\n\r\n1. Github\r\n1. Java 8 (the collector is built with Java 6)\r\n1. AspectJ (in Load-Time Weaving mode)\r\n1. Spring Boot\r\n1. Lombok\r\n1. H2 database (disk persistent, embedded in Codekvast Daemon)\r\n1. MariaDB 10+ (Codekvast Warehouse)\r\n1. Gradle \r\n1. Docker + Docker Compose (optional mode of running Codekvast Warehouse)\r\n\r\n### Directory structure\r\n\r\nThe product itself lives under `product/`.\r\n\r\nSample projects to use when testing Codekvast lives under `sample/`.\r\n\r\nDevelopment tools live under `tools/`.\r\n\r\n### Development environment\r\n\r\n#### JDK\r\n\r\nJava 8 **and** Java 6 is required. OpenJDK is recommended.\r\n\r\n#### Database\r\n\r\nMariaDB v10.0 or later is required for Codekvast Warehouse.\r\n\r\nUse the following command to install MariaDB (Ubuntu, Debian):\r\n\r\n    sudo apt-get install mariadb-server\r\n    \r\nThen the following commands must be executed once:\r\n    \r\n    $ sudo mysql -e \"create database codekvast_warehouse; grant all on codekvast_warehouse.* to 'codekvast'@'localhost' identified by 'codekvast';\"\r\n    \r\n#### Build tool\r\n\r\nCodekvast uses **Gradle** as build tool. It uses the Gradle Wrapper, `gradlew`, which is checked in at the root of the workspace.\r\nThere is the convenience script `tools/src/script/gradle` which simplifies invocation of gradlew. Install that script in your PATH\r\nand use `gradle` instead of `path/to/gradlew`\r\n\r\n#### Software publishing\r\nCodekvast binaries are published to Bintray. To be able to upload to Bintray you need the following lines in your `~/.gradle/gradle.properties`:\r\n\r\n    bintrayUser=my-bintray-user\r\n    bintrayKey=my-bintray-key\r\n\r\nYou also need to be member of the Crisp organisation in Bintray.\r\n\r\n#### IDE\r\n\r\n**Intellij Ultimate Edition 15+** is the recommended IDE with the following plugins:\r\n\r\n1. **Lombok Support** (required)\r\n1. Git (optional)\r\n1. Github (optional)\r\n1. AspectJ Support (optional)\r\n1. AngularJS (optional)\r\n1. Karma (optional)\r\n\r\nDo like this to open Codekvast in Intellij the first time:\r\n\r\n1. File -> New -> Project from Existing Sources...\r\n1. Navigate to the project root\r\n1. Import project from external model...\r\n1. Select Gradle\r\n1. Click Next\r\n1. Accept the defaults (use the project's Gradle wrapper)\r\n1. Click Finish\r\n\r\nAfter the import, some settings must be changed:\r\n\r\n1. File > Settings...\r\n1. Build, Execution, Deployment > Compiler > Annotation Processing\r\n1. Check **Enable annotation processing**\r\n1. Click OK\r\n\r\nThen a couple of module settings must be changed:\r\n\r\n1. File > Project Structure\r\n\r\n1. Platform Settings > SDKs\r\n     You need **both** a **1.6** SDK **and** a **1.8** SDK.\r\n\r\n1. Project Settings > Project\r\n    Project SDK should be **1.8** and\r\n    Project language level should be **8 - Lambdas, type annotations etc**\r\n\r\n1. Project Settings > Modules\r\n    The modules **agent-lib** and **collector** shall have\r\n    Language level **6 - @Override in interfaces** and \r\n    Module SDK: **1.6** (in the Dependencies tab)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}