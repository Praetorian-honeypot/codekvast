---
#---------------------------------------------------------------
# Playbook which provisions the infrastructure using AWS
#---------------------------------------------------------------
- name: AWS infrastructure
  hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - vars/common.yml

  vars:
    ami_id: ami-060cde69 # Stock Ubuntu Server Xenial 16.04 LTS, 64-bit, SSD EBS
    vpc_id: vpc-e2a5f08b
    vpc_subnet_id: subnet-4eecc227 # In eu-central-1a
    common_tags: &common_tags
      Owner: Codekvast
    load_balancers:
      - dns_names: ['api-staging.codekvast.io']
        name: Codekvast-staging
        instances: tag_env_staging
        tags:
          Name: Codekvast-staging
          env: staging
          <<: *common_tags
      - dns_names: ['api.codekvast.io', 'api-prod.codekvast.io']
        name: Codekvast-prod
        instances: tag_env_prod
        tags:
          Name: Codekvast-prod
          env: staging
          <<: *common_tags
    ec2_instances:
      - count: 2
        load_balancer: Codekvast-staging
        tags:
          Name: Codekvast-staging
          env: staging
          role: "database,backend,webserver"
          <<: *common_tags
      - count: 1
        load_balancer: Codekvast-prod
        tags:
          Name: Codekvast-prod
          env: prod
          role: "database,backend,webserver"
          <<: *common_tags

  tasks:
#  - name: Create static DNS records
#    local_action:
#      module: route53
#      command: "{{ item.command | default('create') }}"
#      overwrite: yes
#      record: "{{ item.name }}"
#      ttl: "{{ item.ttl | default('7200') }}"
#      type: "{{ item.type | default('CNAME') }}"
#      value: "{{ item.value }}"
#      zone: codekvast.io
#      profile: codekvast # in ~/.boto
#    with_items:
#    - { name: 'www.codekvast.io', value: crispab.github.io, owner: olle }
#    loop_control:
#      label: "{{ item.name }}"

  - name: Create internal security group
    local_action:
      module: ec2_group
      name: codekvast-internal
      region: "{{ aws_region }}"
      description: "Codekvast internal security group"
      profile: codekvast
      rules:
      - proto: tcp
        from_port: 8080
        to_port: 8080
        group_name: codekvast-public
        group_desc: "Codekvast public security group"

  - name: Create public security group
    local_action:
      module: ec2_group
      name: codekvast-public
      region: "{{ aws_region }}"
      description: "Codekvast public security group"
      profile: codekvast
      rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      rules_egress:
      - proto: tcp
        from_port: 8080
        to_port: 8080
        group_name: codekvast-internal
        group_desc: "Codekvast internal security group"

  - name: Create EC2 instances
    local_action:
      module: ec2
      assign_public_ip: yes
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      group: [codekvast-internal, codekvast-ssh]
      image: "{{ ami_id }}"
      instance_type: t2.micro
      user_data: "{{ lookup('file', 'files/ubuntu-cloud-init.sh') }}"
      exact_count: "{{ item.count }}"
      count_tag: "{{ item.tags }}"
      instance_tags: "{{ item.tags }}"
      wait: yes
      region: "{{ aws_region }}"
      key_name: codekvast
      profile: codekvast # in ~/.boto
    with_items: "{{ ec2_instances }}"
    register: ec2

  - name: Refresh external EC2 cache
    command: "{{ inventory_dir }}/ec2.py --refresh-cache"
    when: ec2.changed

  - name: Refresh in-memory EC2 cache
    meta: refresh_inventory
    when: ec2.changed

  - name: Create Elastic Load Balancers
    local_action:
      module: ec2_elb_lb
      region: "{{ aws_region }}"
      profile: codekvast
      name: "{{ item.name }}"
      instance_ids: "{{ groups[item.instances]|map('extract', hostvars, 'ec2_id')|list }}"
      listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 8080
        proxy_protocol: True
#      - protocol: https
#        load_balancer_port: 443
#        instance_protocol: http
#        instance_port: 80
#        ssl_certificate_id: "arn:aws:iam::123456789012:server-certificate/company/servercerts/ProdServerCert"
      purge_instance_ids: yes
      security_group_names:
      - codekvast-public
      state: present
      subnets:
      - "{{ vpc_subnet_id }}"
      tags: "{{ item.tags }}"
      wait: yes
    with_items: "{{ load_balancers }}"

#----------------------------------------------------------------------------------
#- name: Codekvast Webserver CNAME
#  hosts: tag_role_webserver
#  connection: local
#  gather_facts: no
#  become: no
#
#  tasks:
#    - debug: var=ec2_id
#
#  - set_fact: hostnames={{ ['app-prod.codekvast.io', 'app.codekvast.io'] }}
#    when: ec2_tag_env == 'prod'
#
#  - set_fact: hostnames={{ ['app-staging.codekvast.io'] }}
#    when: ec2_tag_env == 'staging'
#
#  - name: Define CNAME app*.codekvast.io
#    route53:
#      command: create
#      overwrite: yes
#      record: "{{ item }}"
#      ttl: 600
#      type: CNAME
#      value: "{{ ec2_public_dns_name }}"
#      zone: codekvast.io
#      profile: codekvast # in ~/.boto
#    with_items: "{{ hostnames }}"
#
