plugins {
    id 'distribution'
    id 'com.jfrog.bintray' version '1.4'
}

version = codekvastVersion

ext.bintrayUserOrg = 'crisp'
ext.bintrayRepo = 'codekvast'
ext.bintrayDownloadPrefix = "https://dl.bintray.com/$bintrayUserOrg/$bintrayRepo"

distributions {
    daemon {
        baseName = 'codekvast-daemon'
        contents {
            from tasks.getByPath(":product:agent:daemon:installDist")
            from tasks.getByPath(":product:agent:agent-lib:javadocJar"), { into "src" }
            from tasks.getByPath(":product:agent:agent-lib:sourcesJar"), { into "src" }
            from tasks.getByPath(":product:agent:collector:javaagents"), { into "javaagents" }
            from tasks.getByPath(":product:agent:collector:javadocJar"), { into "src" }
            from tasks.getByPath(":product:agent:collector:sourcesJar"), { into "src" }
            from tasks.getByPath(":product:agent:daemon:javadocJar"), { into "src" }
            from tasks.getByPath(":product:agent:daemon:sourcesJar"), { into "src" }
            from tasks.getByPath(":product:docs:asciidoctor"), {
                exclude "html5/**"
                into "doc"
            }
            from "$rootDir/product/docs/src/docs/asciidoc", {
                include "**.adoc"
                into "doc"
            }
            from file("$rootDir/RELEASE-NOTES.md")

        }
    }

    warehouse {
        baseName = 'codekvast-warehouse'
        contents {
            from tasks.getByPath(":product:warehouse:installDist")
            from tasks.getByPath(":product:warehouse:javadocJar"), { into "src" }
            from tasks.getByPath(":product:warehouse:sourcesJar"), { into "src" }
            from tasks.getByPath(":product:docs:asciidoctor"), {
                exclude "html5/**"
                into "doc"
            }
            from "$rootDir/product/docs/src/docs/asciidoc", {
                include "**.adoc"
                into "doc"
            }
            from file("$rootDir/RELEASE-NOTES.md")
        }
    }
}

bintray {
    // These are supposed to be defined in $HOME/.gradle/gradle.properties
    user = project.hasProperty('bintrayUser') ? bintrayUser : "undefined"
    key = project.hasProperty('bintrayKey') ? bintrayKey : "undefined"

    filesSpec {
        from tasks.getByPath(":product:daemonDistZip")
        from tasks.getByPath(":product:warehouseDistZip")
        from tasks.getByPath(":product:docs:asciidoctor"), {
            include "CodekvastUserManual.html"
            rename { "CodekvastUserManual-${version}.html" }
        }
        from file("$rootDir/product/warehouse/docker-compose.yml")
        from file("$rootDir/RELEASE-NOTES.md")
        into "."
    }

    dryRun = false
    publish = true

    pkg {
        userOrg = bintrayUserOrg
        repo = bintrayRepo
        name = 'distributions'
        desc = 'Codekvast is a Runtime Intelligence tool used for identifying Truly Dead Code, i.e., code that no-one has accessed in a certain period of time'
        websiteUrl = 'https://codekvast.crisp.se'
        vcsUrl = 'https://github.com/crispab/codekvast.git'
        licenses = ['MIT']
        labels = ['runtime-intelligence', 'dead-code', 'dead-code-detector', 'truly-dead-code', 'YANIA', 'java', 'java-6', 'jvm']

        publicDownloadNumbers = false
    }
}

bintrayUpload {
    doFirst {
        def gradleProperties = new File(System.properties['user.home'], ".gradle/gradle.properties")
        if (!project.hasProperty('bintrayUser')) {
            throw new IllegalArgumentException("You must define bintrayUser in $gradleProperties before trying to upload to Bintray")
        }
        if (!project.hasProperty('bintrayKey')) {
            throw new IllegalArgumentException("You must define bintrayKey in $gradleProperties before trying to upload to Bintray")
        }
    }
}

task shipIt {
    description "Builds and uploads to bintray"
    group = "publishing"
    dependsOn build, bintrayUpload
}
