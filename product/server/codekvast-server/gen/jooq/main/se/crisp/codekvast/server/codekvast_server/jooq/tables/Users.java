/**
 * This class is generated by jOOQ
 */
package se.crisp.codekvast.server.codekvast_server.jooq.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.1" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends org.jooq.impl.TableImpl<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord> {

	private static final long serialVersionUID = -1665008095;

	/**
	 * The singleton instance of <code>PUBLIC.USERS</code>
	 */
	public static final se.crisp.codekvast.server.codekvast_server.jooq.tables.Users USERS = new se.crisp.codekvast.server.codekvast_server.jooq.tables.Users();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord> getRecordType() {
		return se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord.class;
	}

	/**
	 * The column <code>PUBLIC.USERS.ID</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.lang.Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.USERS.USERNAME</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.lang.String> USERNAME = createField("USERNAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.USERS.ENCODED_PASSWORD</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.lang.String> ENCODED_PASSWORD = createField("ENCODED_PASSWORD", org.jooq.impl.SQLDataType.VARCHAR.length(80), this, "");

	/**
	 * The column <code>PUBLIC.USERS.PLAINTEXT_PASSWORD</code>. Will be replaced by an encoded password at application startup
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.lang.String> PLAINTEXT_PASSWORD = createField("PLAINTEXT_PASSWORD", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "Will be replaced by an encoded password at application startup");

	/**
	 * The column <code>PUBLIC.USERS.ENABLED</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.lang.Boolean> ENABLED = createField("ENABLED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.USERS.EMAIL_ADDRESS</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.lang.String> EMAIL_ADDRESS = createField("EMAIL_ADDRESS", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

	/**
	 * The column <code>PUBLIC.USERS.FULL_NAME</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.lang.String> FULL_NAME = createField("FULL_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>PUBLIC.USERS.CREATED_AT</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.sql.Timestamp> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.USERS.MODIFIED_AT</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.sql.Timestamp> MODIFIED_AT = createField("MODIFIED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.defaulted(true), this, "");

	/**
	 * Create a <code>PUBLIC.USERS</code> table reference
	 */
	public Users() {
		this("USERS", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.USERS</code> table reference
	 */
	public Users(java.lang.String alias) {
		this(alias, se.crisp.codekvast.server.codekvast_server.jooq.tables.Users.USERS);
	}

	private Users(java.lang.String alias, org.jooq.Table<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord> aliased) {
		this(alias, aliased, null);
	}

	private Users(java.lang.String alias, org.jooq.Table<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, se.crisp.codekvast.server.codekvast_server.jooq.Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord, java.lang.Long> getIdentity() {
		return se.crisp.codekvast.server.codekvast_server.jooq.Keys.IDENTITY_USERS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord> getPrimaryKey() {
		return se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_4D;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.UsersRecord>>asList(se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_4D, se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_4D4, se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_4D49);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public se.crisp.codekvast.server.codekvast_server.jooq.tables.Users as(java.lang.String alias) {
		return new se.crisp.codekvast.server.codekvast_server.jooq.tables.Users(alias, this);
	}

	/**
	 * Rename this table
	 */
	public se.crisp.codekvast.server.codekvast_server.jooq.tables.Users rename(java.lang.String name) {
		return new se.crisp.codekvast.server.codekvast_server.jooq.tables.Users(name, null);
	}
}
