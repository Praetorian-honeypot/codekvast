/**
 * This class is generated by jOOQ
 */
package se.crisp.codekvast.server.codekvast_server.jooq.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.1" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Applications extends org.jooq.impl.TableImpl<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord> {

	private static final long serialVersionUID = 94981197;

	/**
	 * The singleton instance of <code>PUBLIC.APPLICATIONS</code>
	 */
	public static final se.crisp.codekvast.server.codekvast_server.jooq.tables.Applications APPLICATIONS = new se.crisp.codekvast.server.codekvast_server.jooq.tables.Applications();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord> getRecordType() {
		return se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord.class;
	}

	/**
	 * The column <code>PUBLIC.APPLICATIONS.ID</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, java.lang.Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.APPLICATIONS.ORGANISATION_ID</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, java.lang.Long> ORGANISATION_ID = createField("ORGANISATION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.APPLICATIONS.NAME</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, java.lang.String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.APPLICATIONS.USAGE_CYCLE_SECONDS</code>. After how long can an unused signature in this application be considered dead?
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, java.lang.Integer> USAGE_CYCLE_SECONDS = createField("USAGE_CYCLE_SECONDS", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "After how long can an unused signature in this application be considered dead?");

	/**
	 * The column <code>PUBLIC.APPLICATIONS.NOTES</code>. Free text notes about the application
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, java.lang.String> NOTES = createField("NOTES", org.jooq.impl.SQLDataType.VARCHAR.length(3000), this, "Free text notes about the application");

	/**
	 * The column <code>PUBLIC.APPLICATIONS.CREATED_AT</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, java.sql.Timestamp> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.APPLICATIONS.MODIFIED_AT</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, java.sql.Timestamp> MODIFIED_AT = createField("MODIFIED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.defaulted(true), this, "");

	/**
	 * Create a <code>PUBLIC.APPLICATIONS</code> table reference
	 */
	public Applications() {
		this("APPLICATIONS", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.APPLICATIONS</code> table reference
	 */
	public Applications(java.lang.String alias) {
		this(alias, se.crisp.codekvast.server.codekvast_server.jooq.tables.Applications.APPLICATIONS);
	}

	private Applications(java.lang.String alias, org.jooq.Table<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Applications(java.lang.String alias, org.jooq.Table<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, se.crisp.codekvast.server.codekvast_server.jooq.Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, java.lang.Long> getIdentity() {
		return se.crisp.codekvast.server.codekvast_server.jooq.Keys.IDENTITY_APPLICATIONS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord> getPrimaryKey() {
		return se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_C1;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord>>asList(se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_C1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.ApplicationsRecord, ?>>asList(se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_C1F);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public se.crisp.codekvast.server.codekvast_server.jooq.tables.Applications as(java.lang.String alias) {
		return new se.crisp.codekvast.server.codekvast_server.jooq.tables.Applications(alias, this);
	}

	/**
	 * Rename this table
	 */
	public se.crisp.codekvast.server.codekvast_server.jooq.tables.Applications rename(java.lang.String name) {
		return new se.crisp.codekvast.server.codekvast_server.jooq.tables.Applications(name, null);
	}
}
