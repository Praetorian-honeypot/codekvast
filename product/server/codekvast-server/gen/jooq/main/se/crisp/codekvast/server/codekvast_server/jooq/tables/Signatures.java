/**
 * This class is generated by jOOQ
 */
package se.crisp.codekvast.server.codekvast_server.jooq.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.1" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Signatures extends org.jooq.impl.TableImpl<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord> {

	private static final long serialVersionUID = -1013310028;

	/**
	 * The singleton instance of <code>PUBLIC.SIGNATURES</code>
	 */
	public static final se.crisp.codekvast.server.codekvast_server.jooq.tables.Signatures SIGNATURES = new se.crisp.codekvast.server.codekvast_server.jooq.tables.Signatures();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord> getRecordType() {
		return se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord.class;
	}

	/**
	 * The column <code>PUBLIC.SIGNATURES.ORGANISATION_ID</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord, java.lang.Long> ORGANISATION_ID = createField("ORGANISATION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.SIGNATURES.APPLICATION_ID</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord, java.lang.Long> APPLICATION_ID = createField("APPLICATION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.SIGNATURES.JVM_ID</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord, java.lang.Long> JVM_ID = createField("JVM_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.SIGNATURES.SIGNATURE</code>. The method signature in human readable format
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord, java.lang.String> SIGNATURE = createField("SIGNATURE", org.jooq.impl.SQLDataType.VARCHAR.length(4000).nullable(false), this, "The method signature in human readable format");

	/**
	 * The column <code>PUBLIC.SIGNATURES.INVOKED_AT_MILLIS</code>. The value of System.currentTimeMillis() at the beginning of the collection interval in which the method was invoked.
  0 means not yet invoked
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord, java.lang.Long> INVOKED_AT_MILLIS = createField("INVOKED_AT_MILLIS", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "The value of System.currentTimeMillis() at the beginning of the collection interval in which the method was invoked.\n  0 means not yet invoked");

	/**
	 * The column <code>PUBLIC.SIGNATURES.MILLIS_SINCE_JVM_START</code>. The delta between invoked_at_millis and the instant the JVM started
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord, java.lang.Long> MILLIS_SINCE_JVM_START = createField("MILLIS_SINCE_JVM_START", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "The delta between invoked_at_millis and the instant the JVM started");

	/**
	 * The column <code>PUBLIC.SIGNATURES.CONFIDENCE</code>. The ordinal for se.crisp.codekvast.server.agent_api.model.v1.SignatureConfidence. NULL for not yet invoked.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord, java.lang.Byte> CONFIDENCE = createField("CONFIDENCE", org.jooq.impl.SQLDataType.TINYINT, this, "The ordinal for se.crisp.codekvast.server.agent_api.model.v1.SignatureConfidence. NULL for not yet invoked.");

	/**
	 * Create a <code>PUBLIC.SIGNATURES</code> table reference
	 */
	public Signatures() {
		this("SIGNATURES", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.SIGNATURES</code> table reference
	 */
	public Signatures(java.lang.String alias) {
		this(alias, se.crisp.codekvast.server.codekvast_server.jooq.tables.Signatures.SIGNATURES);
	}

	private Signatures(java.lang.String alias, org.jooq.Table<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord> aliased) {
		this(alias, aliased, null);
	}

	private Signatures(java.lang.String alias, org.jooq.Table<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, se.crisp.codekvast.server.codekvast_server.jooq.Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.SignaturesRecord, ?>>asList(se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_D, se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_DC, se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_DC9);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public se.crisp.codekvast.server.codekvast_server.jooq.tables.Signatures as(java.lang.String alias) {
		return new se.crisp.codekvast.server.codekvast_server.jooq.tables.Signatures(alias, this);
	}

	/**
	 * Rename this table
	 */
	public se.crisp.codekvast.server.codekvast_server.jooq.tables.Signatures rename(java.lang.String name) {
		return new se.crisp.codekvast.server.codekvast_server.jooq.tables.Signatures(name, null);
	}
}
