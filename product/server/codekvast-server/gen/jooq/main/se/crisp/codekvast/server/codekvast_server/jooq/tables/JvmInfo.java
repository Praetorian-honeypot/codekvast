/**
 * This class is generated by jOOQ
 */
package se.crisp.codekvast.server.codekvast_server.jooq.tables;

/**
 * This class is generated by jOOQ.
 *
 * Data about one JVM that is instrumented by the Codekvast Collector
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.1" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JvmInfo extends org.jooq.impl.TableImpl<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord> {

	private static final long serialVersionUID = -1212001332;

	/**
	 * The singleton instance of <code>PUBLIC.JVM_INFO</code>
	 */
	public static final se.crisp.codekvast.server.codekvast_server.jooq.tables.JvmInfo JVM_INFO = new se.crisp.codekvast.server.codekvast_server.jooq.tables.JvmInfo();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord> getRecordType() {
		return se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord.class;
	}

	/**
	 * The column <code>PUBLIC.JVM_INFO.ID</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.JVM_INFO.ORGANISATION_ID</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Long> ORGANISATION_ID = createField("ORGANISATION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.JVM_INFO.APPLICATION_ID</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Long> APPLICATION_ID = createField("APPLICATION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.JVM_INFO.APPLICATION_VERSION</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> APPLICATION_VERSION = createField("APPLICATION_VERSION", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.JVM_INFO.JVM_UUID</code>. The UUID generated by each Codekvast Collector instance
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> JVM_UUID = createField("JVM_UUID", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "The UUID generated by each Codekvast Collector instance");

	/**
	 * The column <code>PUBLIC.JVM_INFO.AGENT_COMPUTER_ID</code>. The se.crisp.codekvast.agent.util.ComputerID value generated by the Codekvast Agent
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> AGENT_COMPUTER_ID = createField("AGENT_COMPUTER_ID", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "The se.crisp.codekvast.agent.util.ComputerID value generated by the Codekvast Agent");

	/**
	 * The column <code>PUBLIC.JVM_INFO.AGENT_HOST_NAME</code>. The hostname of the machine in which Codekvast Agent executes
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> AGENT_HOST_NAME = createField("AGENT_HOST_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The hostname of the machine in which Codekvast Agent executes");

	/**
	 * The column <code>PUBLIC.JVM_INFO.AGENT_CLOCK_SKEW_MILLIS</code>. The value of System.currentTimeMillis() in the agent when the latest JVM info was sent
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Long> AGENT_CLOCK_SKEW_MILLIS = createField("AGENT_CLOCK_SKEW_MILLIS", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "The value of System.currentTimeMillis() in the agent when the latest JVM info was sent");

	/**
	 * The column <code>PUBLIC.JVM_INFO.AGENT_UPLOAD_INTERVAL_SECONDS</code>. The interval between uploads from this agent (seconds)
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Integer> AGENT_UPLOAD_INTERVAL_SECONDS = createField("AGENT_UPLOAD_INTERVAL_SECONDS", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The interval between uploads from this agent (seconds)");

	/**
	 * The column <code>PUBLIC.JVM_INFO.AGENT_VCS_ID</code>. The Git hash of Codekvast Agent used for uploading the data
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> AGENT_VCS_ID = createField("AGENT_VCS_ID", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "The Git hash of Codekvast Agent used for uploading the data");

	/**
	 * The column <code>PUBLIC.JVM_INFO.AGENT_VERSION</code>. The version of Codekvast Agent used for uploading the data
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> AGENT_VERSION = createField("AGENT_VERSION", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "The version of Codekvast Agent used for uploading the data");

	/**
	 * The column <code>PUBLIC.JVM_INFO.COLLECTOR_COMPUTER_ID</code>. The se.crisp.codekvast.agent.util.ComputerID value generated by the Codekvast Collector
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> COLLECTOR_COMPUTER_ID = createField("COLLECTOR_COMPUTER_ID", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "The se.crisp.codekvast.agent.util.ComputerID value generated by the Codekvast Collector");

	/**
	 * The column <code>PUBLIC.JVM_INFO.COLLECTOR_HOST_NAME</code>. The hostname of the machine in which Codekvast Collector executes
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> COLLECTOR_HOST_NAME = createField("COLLECTOR_HOST_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "The hostname of the machine in which Codekvast Collector executes");

	/**
	 * The column <code>PUBLIC.JVM_INFO.COLLECTOR_RESOLUTION_SECONDS</code>.
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Integer> COLLECTOR_RESOLUTION_SECONDS = createField("COLLECTOR_RESOLUTION_SECONDS", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.JVM_INFO.COLLECTOR_VCS_ID</code>. The Git hash of Codekvast used for collecting the data
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> COLLECTOR_VCS_ID = createField("COLLECTOR_VCS_ID", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "The Git hash of Codekvast used for collecting the data");

	/**
	 * The column <code>PUBLIC.JVM_INFO.COLLECTOR_VERSION</code>. The version of Codekvast used for collecting the data
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> COLLECTOR_VERSION = createField("COLLECTOR_VERSION", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "The version of Codekvast used for collecting the data");

	/**
	 * The column <code>PUBLIC.JVM_INFO.METHOD_VISIBILITY</code>. Which methods are being tracked?
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> METHOD_VISIBILITY = createField("METHOD_VISIBILITY", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "Which methods are being tracked?");

	/**
	 * The column <code>PUBLIC.JVM_INFO.STARTED_AT_MILLIS</code>. The value of System.currentTimeMillis() when Codekvast Collector instance was started
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Long> STARTED_AT_MILLIS = createField("STARTED_AT_MILLIS", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "The value of System.currentTimeMillis() when Codekvast Collector instance was started");

	/**
	 * The column <code>PUBLIC.JVM_INFO.REPORTED_AT_MILLIS</code>. The value of System.currentTimeMillis() when Codekvast Collector made an output of the collected data
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Long> REPORTED_AT_MILLIS = createField("REPORTED_AT_MILLIS", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "The value of System.currentTimeMillis() when Codekvast Collector made an output of the collected data");

	/**
	 * The column <code>PUBLIC.JVM_INFO.NEXT_REPORT_EXPECTED_BEFORE_MILLIS</code>. The timestamp before next report is expected
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Long> NEXT_REPORT_EXPECTED_BEFORE_MILLIS = createField("NEXT_REPORT_EXPECTED_BEFORE_MILLIS", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "The timestamp before next report is expected");

	/**
	 * The column <code>PUBLIC.JVM_INFO.TAGS</code>. Any tags that were set in codekvast-collector.conf
	 */
	public final org.jooq.TableField<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.String> TAGS = createField("TAGS", org.jooq.impl.SQLDataType.VARCHAR.length(1000), this, "Any tags that were set in codekvast-collector.conf");

	/**
	 * Create a <code>PUBLIC.JVM_INFO</code> table reference
	 */
	public JvmInfo() {
		this("JVM_INFO", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.JVM_INFO</code> table reference
	 */
	public JvmInfo(java.lang.String alias) {
		this(alias, se.crisp.codekvast.server.codekvast_server.jooq.tables.JvmInfo.JVM_INFO);
	}

	private JvmInfo(java.lang.String alias, org.jooq.Table<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord> aliased) {
		this(alias, aliased, null);
	}

	private JvmInfo(java.lang.String alias, org.jooq.Table<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, se.crisp.codekvast.server.codekvast_server.jooq.Public.PUBLIC, aliased, parameters, "Data about one JVM that is instrumented by the Codekvast Collector");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, java.lang.Long> getIdentity() {
		return se.crisp.codekvast.server.codekvast_server.jooq.Keys.IDENTITY_JVM_INFO;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord> getPrimaryKey() {
		return se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_5;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord>>asList(se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_5);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<se.crisp.codekvast.server.codekvast_server.jooq.tables.records.JvmInfoRecord, ?>>asList(se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_55, se.crisp.codekvast.server.codekvast_server.jooq.Keys.CONSTRAINT_553);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public se.crisp.codekvast.server.codekvast_server.jooq.tables.JvmInfo as(java.lang.String alias) {
		return new se.crisp.codekvast.server.codekvast_server.jooq.tables.JvmInfo(alias, this);
	}

	/**
	 * Rename this table
	 */
	public se.crisp.codekvast.server.codekvast_server.jooq.tables.JvmInfo rename(java.lang.String name) {
		return new se.crisp.codekvast.server.codekvast_server.jooq.tables.JvmInfo(name, null);
	}
}
