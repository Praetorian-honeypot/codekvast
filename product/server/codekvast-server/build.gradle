buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.ajoberstar:grgit:0.3.1"
    }
}
apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'spring-boot'
apply plugin: 'application'

description = "The main CodeKvast server"
archivesBaseName = "codekvast-server"
version = project.parent.parent.version
ext.gitCommit = getLatestGitCommit()
sourceCompatibility = 1.7
mainClassName = "se.crisp.codekvast.server.codekvast_server.CodeKvastServerMain"

dependencies {
    compile "ch.qos.logback:logback-classic"

    compile "com.h2database:h2"
    compile "org.flywaydb:flyway-core"
    compile "org.springframework.boot:spring-boot-starter-jdbc"

    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework:spring-messaging"
    compile "org.webjars:angularjs:1.2.25"
    compile "org.webjars:sockjs-client:0.3.4"
    compile "org.webjars:stomp-websocket:2.3.1"
    compile lombok
    compile project(":product:server:agent-delegate")

    runtime "org.hibernate:hibernate-validator"

    testCompile "org.springframework.boot:spring-boot-starter-test"
}


import org.ajoberstar.grgit.Grgit
import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/default.properties'
        filter(ReplaceTokens, tokens: [
                "gradle.name"       : project.name,
                "gradle.description": project.description,
                "gradle.version"    : project.version,
                "git.id"            : "$gitCommit.id".toString(),
                "git.committer"     : "$gitCommit.committer.name <$gitCommit.committer.email>".toString(),
                "git.shortMessage"  : "$gitCommit.shortMessage".toString(),
                "git.time"          : "${new SimpleDateFormat('yyyy-MM-dd hh:mm:ss').format(new Date(gitCommit.time * 1000L))}".toString(),
        ])
    }
}

applicationDistribution.from("src/main/resources") {
    into "conf"
    include "logback.xml", "default.properties"
    rename {
        def name = it == "default.properties" ? "application.properties" : it
        "${name}.default"
    }
    filter { line ->
        line.startsWith('info.build.') ? "" : line
    }
}

startScripts {
    doLast {
        outputs.files.each { script ->
            logger.info "Adjusting CLASSPATH in {} to start with \$APP_HOME/conf/ ...", script.name
            def text = script.text
            text = text.replace('CLASSPATH=$APP_HOME/lib', 'CLASSPATH=$APP_HOME/conf/:$APP_HOME/lib')
            script.text = text
        }
    }
}

def getLatestGitCommit() {
    def grgit = Grgit.open("$rootDir")
    grgit.log(maxCommits: 1)[0]
}
