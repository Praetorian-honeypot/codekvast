plugins {
    id 'java'
    id 'application'
    id 'com.ofg.uptodate' version "1.1.0"
    id "com.moowork.node" version "0.8"
    // id "com.eriwen.gradle.js" version "1.12.1"
    // id "com.eriwen.gradle.css" version "1.11.1"
}
apply plugin: 'spring-boot'

description = "The main Codekvast server"
archivesBaseName = "codekvast-server"
version = project.parent.parent.version
sourceCompatibility = 1.7
mainClassName = "se.crisp.codekvast.server.codekvast_server.CodekvastServerApplication"

configurations {
    springLoaded
    webjar
}

sourceSets {
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
    }
}

task integTest(type: Test) {
    group = "Verification"
    description = "Runs all integration tests"

    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}

check.dependsOn integTest

def webjars = ["org.webjars:jquery:2.1.3",
               "org.webjars:angularjs:1.3.6",
               "org.webjars:sockjs-client:0.3.4",
               "org.webjars:stomp-websocket:2.3.1",
               "org.webjars:bootstrap:3.3.1"]


dependencies {
    compile lombok
    compile project(":product:server:agent-delegate")
    compile "com.google.guava:guava:18.0"
    compile "ch.qos.logback:logback-classic"

    compile "org.springframework.boot:spring-boot-starter-jdbc"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework:spring-messaging"
    compile "com.h2database:h2"
    compile "org.flywaydb:flyway-core"

    runtime project(':product:support:websupport')
    runtime "org.hibernate:hibernate-validator"

    runtime webjars

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
    testCompile "org.spockframework:spock-spring:0.7-groovy-2.0"

    integTestCompile sourceSets.main.output
    integTestCompile configurations.testCompile
    integTestCompile sourceSets.test.output
    integTestRuntime configurations.testRuntime

    springLoaded springLoadedAgent

    webjar webjars
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/default.properties'
        filter(ReplaceTokens, tokens: gitVersionTokens + ['gradle.name'       : project.name,
                                                          'gradle.description': project.description,
                                                          'gradle.version'    : project.version]
        )
    }
}

applicationDistribution.from("src/main/resources") {
    into "conf"
    include "logback.xml", "default.properties"
    rename {
        def name = it == "default.properties" ? "application.properties" : it
        "${name}.default"
    }
    // Hide lines starting with info.build.
    filter { line ->
        line.startsWith('info.build.') ? "" : line
    }
}

startScripts {
    doLast {
        outputs.files.each { script ->
            logger.info "Adjusting CLASSPATH in {} to start with \$APP_HOME/conf/ ...", script.name
            script.text = script.text.replace('CLASSPATH=$APP_HOME/lib', 'CLASSPATH=$APP_HOME/conf/:$APP_HOME/lib')
        }
    }
}

bootRun {
    jvmArgs = [
            "-javaagent:${configurations.springLoaded.asPath}",
            "-noverify",
            "-Dspring.thymeleaf.cache=false",
            "-Dspring.messages.cacheSeconds=1"
    ]

}

node {
    version = '0.10.35'
    npmVersion = '2.1.17'
    download = true
    workDir = file(".nodejs")
}

task copyWebjars(type: Sync) {
    from configurations.webjar
    into file("build/webjars")
}

task unpackWebjars {
    dependsOn copyWebjars

    def webjarsDir = file("build/webjars")
    def explodedDir = file("build/webjarJs")

    inputs.files copyWebjars
    outputs.dir explodedDir

    doLast {
        webjarsDir.eachFile { file ->
            copy {
                from zipTree(file)
                include "**/*.js"
                exclude "**/*.min.js"
                into explodedDir
                eachFile { FileCopyDetails details ->
                    logger.debug "Copying {}", details.path
                    // Eliminate everything before the last "/"
                    details.path = details.name
                }
            }
        }
    }
}

task jasmineSingleRun(type: NpmTask) {
    group = "Verification"
    description = "Runs the Jasmine tests."
    dependsOn npmInstall, unpackWebjars
    args = ['run', 'single-run-test']
}

task jasmineWatch(type: NpmTask) {
    group = "Verification"
    description = "Continuously runs the Jasmine tests."
    dependsOn npmInstall, unpackWebjars
    args = ['run', 'watch-test']
}

// check.dependsOn jasmineSingleRun
