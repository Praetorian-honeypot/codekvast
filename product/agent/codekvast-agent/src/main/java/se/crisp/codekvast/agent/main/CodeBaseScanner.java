package se.crisp.codekvast.agent.main;

import com.google.common.base.Predicate;
import lombok.extern.slf4j.Slf4j;
import org.reflections.Reflections;
import org.reflections.scanners.SubTypesScanner;
import org.reflections.util.ConfigurationBuilder;
import org.springframework.stereotype.Component;
import se.crisp.codekvast.agent.util.SignatureUtils;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.net.URLClassLoader;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;

import static java.util.Arrays.asList;

/**
 * Analyzes a code base and detects public methods. Uses the org.reflections for retrieving method signature data.
 *
 * It also contains support for mapping synthetic methods generated by runtime byte code manipulation frameworks back to the declared method
 * as it appears in the source code.
 *
 * @author Olle Hallin
 */
@Slf4j
@Component
class CodeBaseScanner {

    private static class PrefixPredicate implements Predicate<String> {
        private final Pattern pattern;

        private PrefixPredicate(Set<String> prefixes) {
            this.pattern = buildPattern(prefixes);
        }

        private Pattern buildPattern(Set<String> prefixes) {
            StringBuilder sb = new StringBuilder("^");
            String delimiter = "(";
            for (String prefix : prefixes) {
                sb.append(delimiter).append(prefix);
                delimiter = "|";
            }
            sb.append(").*\\.class$");
            return Pattern.compile(sb.toString());
        }

        @Override
        public boolean apply(String input) {
            return pattern.matcher(input).matches();
        }
    }

    void getPublicMethodSignatures(CodeBase codeBase) {
        URLClassLoader appClassLoader = new URLClassLoader(codeBase.getUrls(), System.class.getClassLoader());
        Set<String> prefixes = codeBase.getConfig().getNormalizedPackagePrefixes();
        ConfigurationBuilder builder = ConfigurationBuilder.build(appClassLoader, new SubTypesScanner(false));
        builder.filterInputsBy(new PrefixPredicate(prefixes));

        Reflections reflections1 = new Reflections(builder);
        List<Class<Object>> rootClasses1 = asList(Object.class);
        int count1 = 0;
        for (Class<?> rootClass : rootClasses1) {
            for (Class<?> clazz : reflections1.getSubTypesOf(rootClass)) {
                count1 += 1;
                findPublicMethods(codeBase, prefixes, clazz);
            }
        }
        log.info("Found {} classes", count1);
    }

    void findPublicMethods(CodeBase codeBase, Set<String> packagePrefixes, Class<?> clazz) {
        log.debug("Analyzing {}", clazz);
        if (clazz.getName().contains("ConcurrentHashMapConverter")) {
            int i = 17;
        }
        try {
            Method[] methods = clazz.getMethods();

            for (Method method : methods) {
                if (Modifier.isPublic(method.getModifiers())) {

                    // Some AOP frameworks (e.g., Guice) push methods from a base class down to the subclasses created in runtime.
                    // We need to map those back to the original declaring signature, or else the original,
                    // declared method will look unused.

                    String thisSignature = SignatureUtils.makeSignatureString(clazz, method);
                    String declaringSignature =
                            SignatureUtils.makeSignatureString(findDeclaringClass(method.getDeclaringClass(), method, packagePrefixes),
                                                               method);

                    codeBase.addSignature(thisSignature, declaringSignature);
                }
            }

            for (Class<?> innerClass : clazz.getDeclaredClasses()) {
                findPublicMethods(codeBase, packagePrefixes, innerClass);
            }
        } catch (NoClassDefFoundError e) {
            log.warn("Cannot analyze {}: {}", clazz, e.toString());
        }
    }

    private Class findDeclaringClass(Class<?> clazz, Method method, Set<String> packagePrefixes) {
        if (clazz == null) {
            return null;
        }
        String pkg = clazz.getPackage().getName();

        boolean found = false;
        for (String prefix : packagePrefixes) {
            if (pkg.startsWith(prefix)) {
                found = true;
                break;
            }
        }

        if (!found) {
            return null;
        }

        try {
            clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());
            return clazz;
        } catch (NoSuchMethodException ignore) {
        }
        return findDeclaringClass(clazz.getSuperclass(), method, packagePrefixes);
    }

}
