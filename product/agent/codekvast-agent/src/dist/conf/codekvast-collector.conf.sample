#--------------------------------------------------------------------------------------------------------
# Sample Codekvast Collector Config
#
# DO NOT EDIT THIS FILE!!! It will be overwritten on the next deploy of Codekvast.
# Make a copy and edit to suit your needs.
#
# Codekvast will find this file automatically if you leave it in the original location, i.e. in the conf/ folder next
# to the folder which contains codekvast-collector-x.x.x.jar
#
# If you rename the file or put the file somewhere else you must tell the location by setting the system property codekvast.configuration
#
# Example:
# -Dcodekvast.configuration=/path/to/codekvast.conf
#
# NOTE 1:
# You can specify parameter overrides by setting the system property codekvast.options
# Specify common properties in a shared config file, and specify the individual properties in codekvast.options.
# This is useful if you have a host with more than one application that should use Codekvast and they have similar configuration.
# Separate parameter name and value with '='.
# Separate different variable pairs with ';'.
#
# Example:
#   -Dcodekvast.options=appName=mainserver;appVersion=manifest mainserver.jar
#
# NOTE 2:
# You can specify parameter overrides on the command line by appending them to the javaagent path.
# Separate the jar file from the first parameter with '='.
#
# Example:
# -javaagent:/path/to/codekvast-collector-x.x.jar=appName=someApp;collectorResolutionSeconds=300
# -javaagent:/path/to/codekvast-collector-x.x.jar=appName=someOtherApp;collectorResolutionSeconds=600
#
# NOTE 3: Expansion of system properties and environment variables are supported.
# If there is both a system property AND an environment variable with the same name, then the system property will win.
#
# Example:
# dataDir = ${user.home}/codekvast
# dataDir = $HOME/codekvast
#--------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------
# Where is my application deployed?
#
# A comma-separated list of file system paths.
#
# For a WAR (e.g., myapp.war) deployed in Tomcat, specify /path/to/apache-tomcat-x.x.x/webapps/myapp
# without the .war suffix. Tomcat will automatically explode the war into a folder without the .war suffix.
#
# NOTE: Some applications (e.g., Jenkins) will download plugins on the fly and store them in some well-known location on disk.
# In the case of Jenkins this path is ${user.home}/.jenkins/plugins.
#
# NOTE: Spaces in a path must be escaped, i.e., preceded with a bask slash ('\') character.
#
# NOTE: When running on Windows, the colon after the drive letter must be escaped, i.e., preceded with a backslash '\'.
# Example:
# codeBase = C\:/Program\ Files/Tomcat/webapps/myapp
#
# Mandatory.
#--------------------------------------------------------------------------------------------------------
# codeBase = /path/to/codebase1/, /path/to/codebase2/

#--------------------------------------------------------------------------------------------------------
# What is my application's name?
#
# Used for distinguishing multiple applications built from the same code base. Code can only be considered truly dead
# if none of the applications invoke it.
#
# Mandatory.
#--------------------------------------------------------------------------------------------------------
# appName = Sample Application Name

#--------------------------------------------------------------------------------------------------------
# What version of the application is deployed?
#
# Used for tracking dead code evolution over application versions.
#
# The appVersion parameter supports some strategies for finding the version. See the examples below.
#
# Optional. Defaults to "unspecified"
#--------------------------------------------------------------------------------------------------------

# Specify "17.2" as the application version
# appVersion = literal 17.2

# Short-hand for "literal 17.2"
# appVersion = 17.2

# Locate my-application.jar anywhere in codeBase and use the value of the manifest attribute "My-App-Version" inside that jar's
# META-INF/MANIFEST.MF
# appVersion = manifest my-application.jar My-App-Version

# Short-hand for "manifest my-application.jar Implementation-Version"
# appVersion = manifest my-application.jar

# Search in the code base for a file with a name that matches the regular expression.
# If there are no parenthesis in the pattern, the whole filename is used as version, else just the part between the parenthesis.
# java.util.regex.Pattern is used for matching.
#
# Example 1: "appVersion = filename my-application-(.*).jar" will return "1.7.7" if there is a file somewhere in the codebase with the
# name "my-application-1.7.7.jar"
#
# Example 2: "appVersion = filename my-application-.*.jar" will return "my-application-1.7.7.jar" if there is a file somewhere in the
# codebase with the name "my-application-1.7.7.jar"
#
# appVersion = filename my-application-(.*).jar

#--------------------------------------------------------------------------------------------------------
# What packages should be tracked?
#
# A comma-separated list of package prefixes. All methods in classes with a package name starting with any of the prefixes will
# be tracked.
#
# Mandatory.
#--------------------------------------------------------------------------------------------------------
# packagePrefixes = com.acme, foo.bar

#--------------------------------------------------------------------------------------------------------
# What collector resolution is needed?
#
# Controls how often invocation data is exported from the Codekvast collector.
# A higher value means less CPU overhead but higher memory demand.
# A higher value also means less precision.
#
# Optional. Defaults to 600 seconds.
#--------------------------------------------------------------------------------------------------------
# collectorResolutionSeconds = 600

#--------------------------------------------------------------------------------------------------------
# Which part of the file system shall Codekvast Collector dump the invocation data to?
#
# Must be the same path as in codekvast-agent.conf
#
# Optional. Defaults to ${java.io.tmpdir}/codekvast, which normally is /tmp/codekvast.
# NOTE: When running inside an app server or Tomcat, the tmp directory is normally something else!
#--------------------------------------------------------------------------------------------------------
dataPath = /tmp/codekvast

#--------------------------------------------------------------------------------------------------------
# Should Codekvast Collector say something on standard output upon start?
#
# Useful for trouble shooting.
#
# Optional. Defaults to false
#--------------------------------------------------------------------------------------------------------
verbose = true

#--------------------------------------------------------------------------------------------------------
# Should Codekvast Collector configure logging for Aspectj Weaver?
#
# Useful for trouble shooting.
#
# See also https://eclipse.org/aspectj/doc/next/devguide/ltw-configuration.html
#
# Optional. Defaults to the empty string.
#--------------------------------------------------------------------------------------------------------
# aspectjOptions = -verbose -showWeaveInfo
aspectjOptions = -verbose
