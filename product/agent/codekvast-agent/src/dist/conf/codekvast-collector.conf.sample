#--------------------------------------------------------------------------------------------------------
# Sample Codekvast CollectorConfig
#
# Make a copy and edit to suit your needs.
#
# You tell the Codekvast Collector to use it by specifying the absolute path to the config file as argument to the Java agent.
# Example:
# -javaagent:/path/to/codekvast-collector-x.x.jar=/path/to/codekvast-collector.conf
#
# NOTE 1:
# You can specify parameter overrides on the command line by appending them to the configuration file path, separated by semicolon (;).
# This is useful if you have more than one application that should use Codekvast and they have similar configuration.
# Specify common properties in a shared config file, and specify the individual properties on the command line.
#
# Example:
# -javaagent:/path/to/codekvast-collector-x.x.jar=/path/to/codekvast-collector.conf;appName=someApp;appVersion=3.14
# -javaagent:/path/to/codekvast-collector-x.x.jar=/path/to/codekvast-collector.conf;appName=someOtherApp;appVersion=1.17
#
# NOTE 2: Do not edit this file! It will be overwritten by the next Codekvast upgrade!
#--------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------
# What is my customer name?
#
# Used for distinguishing my apps in a multi-tenant Codekvast server.
#
# Mandatory.
#--------------------------------------------------------------------------------------------------------
# customerName = Customer Name

#--------------------------------------------------------------------------------------------------------
# Where is my application deployed?
#
# A comma-separated list of file system paths.
#
# For a WAR (e.g., myapp.war) deployed in Tomcat, specify /path/to/apache-tomcat-x.x.x/webapps/myapp
# without the .war suffix. Tomcat will automatically explode the war into a folder without the .war suffix.
#
# NOTE: Some applications (e.g., Jenkins) will download plugins on the fly and store them in some well-known location on disk.
# In the case of Jenkins this path is $HOME/.jenkins/plugins.
#
# Mandatory.
#--------------------------------------------------------------------------------------------------------
# codeBaseUris = /path/to/codebase1/, /path/to/codebase2/

#--------------------------------------------------------------------------------------------------------
# What is my application's name?
#
# Used for distinguishing multiple applications built from the same code base. Code can only be considered truly dead
# if none of the applications invoke it.
#
# Mandatory.
#--------------------------------------------------------------------------------------------------------
# appName = Sample Application Name

#--------------------------------------------------------------------------------------------------------
# What version of the application is deployed?
#
# Used for tracking dead code evolution over application versions.
#
# The appVersion parameter supports some strategies for finding the version. See the examples below.
#
# Optional. Defaults to "unspecified"
#--------------------------------------------------------------------------------------------------------

# Specify "17.2" as the application version
# appVersion = literal 17.2

# Short-hand for "literal 17.2"
# appVersion = 17.2

# Locate my-application.jar anywhere in any of codeBaseUris and use the value of the manifest attribute "My-App-Version" inside that jar's
# META-INF/MANIFEST.MF
# appVersion = manifest my-application.jar My-App-Version

# Short-hand for "manifest my-application.jar Implementation-Version"
# appVersion = manifest my-application.jar

# Use this exact URI for locating the jar
# appVersion = manifest file:/path/to/my-application.jar

#--------------------------------------------------------------------------------------------------------
# What packages should be tracked?
#
# A comma-separated list of package prefixes. All methods in classes with a package name starting with any of the prefixes will
# be tracked.
#
# Mandatory.
#--------------------------------------------------------------------------------------------------------
# packagePrefixes = com.acme, foo.bar

#--------------------------------------------------------------------------------------------------------
# What collector resolution is needed?
#
# Controls how often invocation data is exported from the Codekvast collector.
# A higher value means less overhead but also less precision.
#
# Optional. Defaults to 600 seconds.
#--------------------------------------------------------------------------------------------------------
# collectorResolutionSeconds = 600

#--------------------------------------------------------------------------------------------------------
# Which part of the file system shall Codekvast Collector dump the invocation data to?
#
# Must be the same path as in codekvast-agent.conf
#
# Optional. Defaults to /tmp/codekvast
#--------------------------------------------------------------------------------------------------------
# dataPath = /tmp/codekvast

#--------------------------------------------------------------------------------------------------------
# Should Codekvast Collector say something on standard output upon start?
#
# Useful for trouble shooting.
#
# Optional. Defaults to false
#--------------------------------------------------------------------------------------------------------
# verbose = false

#--------------------------------------------------------------------------------------------------------
# Should Codekvast Collector configure logging for Aspectj Weaver?
#
# Useful for trouble shooting.
#
# See also https://eclipse.org/aspectj/doc/next/devguide/ltw-configuration.html
#
# Optional. Defaults to the empty string.
#--------------------------------------------------------------------------------------------------------
# aspectjOptions = -verbose -showWeaveInfo
