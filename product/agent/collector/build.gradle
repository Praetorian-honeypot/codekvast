plugins {
    id "com.github.johnrengelman.shadow" version "1.2.3"
}
apply from: "$rootDir/gradle/java-6.gradle"
apply from: "$rootDir/gradle/license.gradle"

apply plugin: 'com.jfrog.bintray'

description = "The collector part of Codekvast, the code that runs inside the instrumented app's JVM"
archivesBaseName = "codekvast-collector"
version = project.parent.parent.version

configurations {
    aspectjweaver
}

dependencies {
    compile project(":product:agent:agent-lib"), { transitive = false }
    compile aspectjWeaver

    aspectjweaver aspectjWeaver

    // Absolutely NO other compile or runtime dependencies are allowed here!
    // All (transitive) compile and runtime dependencies will end up in the instrumented app's system
    // class path, which is unacceptable.

    testCompile junit
    testCompile mockito
    testCompile lombok
}

shadowJar {
    classifier = 'all'
    manifest {
        attributes(
                "Premain-Class": "se.crisp.codekvast.agent.collector.CodekvastCollector",
                "Implementation-Title": archivesBaseName,
                "Implementation-Version": codekvastDisplayVersion
        )
    }
    dependencies {
        exclude(dependency('org.aspectj:aspectjweaver'))
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task javaagents(type: Sync) {
    from configurations.aspectjweaver
    from tasks.shadowJar
    into "$buildDir/javaagents"
}

apply plugin: 'maven-publish'
publishing {
    publications {
        shadowJar(MavenPublication) {
            groupId 'se.crisp.codekvast'
            artifactId 'codekvast-collector'
            from components.shadow
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
        }
    }
}

bintray {
    // These are supposed to be defined in $HOME/.gradle/gradle.properties
    user = project.hasProperty('bintrayUser') ? bintrayUser : "undefined"
    key = project.hasProperty('bintrayKey') ? bintrayKey : "undefined"

    publications = ['shadowJar']

    dryRun = false
    publish = true

    pkg {
        userOrg = bintrayUserOrg
        repo = 'maven-repo'
        name = 'codekvast-collector'
        desc = 'Just the javaagent part of Codekvast'
        vcsUrl = 'https://github.com/crispab/codekvast.git'
        licenses = ['MIT']

        publicDownloadNumbers = false
    }
}

bintrayUpload {
    doFirst {
        def gradleProperties = new File(System.properties['user.home'], ".gradle/gradle.properties")
        if (!project.hasProperty('bintrayUser')) {
            throw new IllegalArgumentException("You must define bintrayUser in $gradleProperties before trying to upload to Bintray")
        }
        if (!project.hasProperty('bintrayKey')) {
            throw new IllegalArgumentException("You must define bintrayKey in $gradleProperties before trying to upload to Bintray")
        }
    }
}
