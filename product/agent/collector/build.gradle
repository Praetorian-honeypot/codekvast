apply from: "$rootDir/gradle/java-6.gradle"
apply from: "$rootDir/gradle/license.gradle"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.unbroken-dome.test-sets'

description = "The collector part of Codekvast, the code that runs inside the instrumented app's JVM"
archivesBaseName = "codekvast-collector"
version = codekvastVersion

configurations {
    aspectjweaver
    jacocoagent
}

testSets {
    integrationTest
}
check.dependsOn integrationTest

dependencies {
    compile project(":product:agent:agent-lib")
    compileOnly aspectjWeaver

    // Absolutely NO other compile or runtime dependencies are allowed here!
    // All (transitive) compile and runtime dependencies will end up in the instrumented app's system
    // class path, which is unacceptable.

    aspectjweaver aspectjWeaver

    testCompile aspectjWeaver
    testCompile junit
    testCompile mockito
    testCompile lombok

    integrationTestCompile project(":product:support:testsupport")

    jacocoagent 'org.jacoco:org.jacoco.agent:0.7.6.201602180812:runtime@jar'
}

shadowJar {
    classifier = 'all'
    manifest {
        attributes(
                "Premain-Class": "se.crisp.codekvast.agent.collector.CodekvastCollector",
                "Implementation-Title": archivesBaseName,
                "Implementation-Version": codekvastDisplayVersion
        )
    }
    dependencies {
        exclude(dependency('org.aspectj:aspectjweaver'))
    }
}

integrationTest {
    inputs.files shadowJar.outputs.files

    systemProperty 'integrationTest.codekvastCollector', shadowJar.outputs.files.asPath
    systemProperty 'integrationTest.aspectjweaver', configurations.aspectjweaver.asPath
    systemProperty 'integrationTest.jacocoagent', "${configurations.jacocoagent.asPath}=destfile=build/jacoco/integrationTest2.exec,output=file,dumponexit=true"
    systemProperty 'integrationTest.classpath', file("build/classes/integrationTest/")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task javaagents(type: Sync) {
    from configurations.aspectjweaver
    from tasks.shadowJar
    into "$buildDir/javaagents"
}

apply plugin: 'maven-publish'
publishing {
    publications {
        shadowJar(MavenPublication) {
            groupId 'se.crisp.codekvast'
            artifactId 'codekvast-collector'
            version codekvastVersion
            from components.shadow
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
        }
    }
}

bintray {
    // These are supposed to be defined in $HOME/.gradle/gradle.properties
    user = project.findProperty('bintrayUser') ?: "undefined"
    key = project.findProperty('bintrayKey') ?: "undefined"

    publications = ['shadowJar']

    dryRun = false
    publish = true

    pkg {
        userOrg = 'crisp'
        repo = project.findProperty('bintrayRepo') ?: 'unspecified'
        name = project.findProperty('bintrayPkgName') ?: 'unspecified'
        desc = 'The javaagent part of Codekvast.'
        vcsUrl = 'https://github.com/crispab/codekvast.git'
        licenses = ['MIT']
        githubRepo = 'crispab/codekvast'
        githubReleaseNotesFile = 'RELEASE-NOTES.md'

        publicDownloadNumbers = true
    }
}

bintrayUpload {
    doFirst {
        def gradleProperties = new File(System.properties['user.home'], ".gradle/gradle.properties")
        if (!project.hasProperty('bintrayUser')) {
            throw new IllegalArgumentException("You must define bintrayUser in $gradleProperties before trying to upload to Bintray")
        }
        if (!project.hasProperty('bintrayKey')) {
            throw new IllegalArgumentException("You must define bintrayKey in $gradleProperties before trying to upload to Bintray")
        }
    }
}
