//--- Docker ---------------------------------------------------------------------------------------
task buildDockerImage {
    description "Builds the Docker image $codekvastWarehouseImageName:$codekvastDisplayVersion"
    group 'Distribution'

    def jarFile = file("build/libs/${archivesBaseName}-${codekvastVersion}-all.jar")
    def dockerFile = file("src/docker/Dockerfile")
    def dockerDir = file('build/docker')

    inputs.file dockerFile
    inputs.file jarFile
    outputs.dir dockerDir

    dependsOn ':product:warehouse:test', ':product:warehouse:bootRepackage'

    doLast {
        mkdir dockerDir

        assert dockerFile.exists()
        copy {
            from dockerFile
            into dockerDir
            expand(project.properties)
        }

        assert jarFile.exists()
        copy {
            from jarFile
            into dockerDir
        }

        def imageId = executeDockerBuild(dockerDir)

        assert "docker tag $imageId $codekvastWarehouseImageName:$codekvastDisplayVersion".execute().waitFor() == 0
        assert "docker tag $imageId $codekvastWarehouseImageName:$codekvastVersion".execute().waitFor() == 0
        assert "docker tag $imageId $codekvastWarehouseImageName:latest".execute().waitFor() == 0
        logger.lifecycle "docker images $codekvastWarehouseImageName".execute().text.trim()
    }
}
assemble.dependsOn buildDockerImage

String executeDockerBuild(File dockerDir) {
    def command = "docker build --quiet $dockerDir"
    def process = command.execute()
    def rc = process.waitFor()
    def stderr = process.err.text.trim()
    def stdout = process.in.text.trim()
    if (rc != 0) {
        throw new IllegalStateException("Failed to execute $command: $stderr")
    }
    logger.info("Result of {}: {}", command, stdout)
    return stdout
}
