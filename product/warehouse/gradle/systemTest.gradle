// --- End-to-end system test -----------------------------------------------------------------------------------

testSets {
    systemTest
}

systemTest.dependsOn test, frontendTest
check.dependsOn systemTest

configurations {
    chromeDriver
}

dependencies {
    systemTestCompileOnly lombok

    systemTestCompile project(':product:testsupport')
    systemTestCompile 'org.gebish:geb-spock:1.0'
    systemTestCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    systemTestCompile 'org.seleniumhq.selenium:selenium-api:2.53.1'

    systemTestRuntime 'com.codeborne:phantomjsdriver:1.3.0'
    systemTestRuntime 'org.seleniumhq.selenium:selenium-chrome-driver:2.53.1'
    systemTestRuntime 'org.seleniumhq.selenium:selenium-firefox-driver:2.53.1'
    systemTestRuntime 'org.seleniumhq.selenium:selenium-support:2.53.1'

    chromeDriver 'com.github.igor-suhorukov:chromedriver:2.24:linux64@bin'
}

task startSystemTestEnvironment {
    description 'docker-compose up'
    group 'System test'
    dependsOn ':product:warehouse:buildDockerImage'
    doLast {
        def forceRecreate = System.getenv('LEAVE_SYSTEM_TEST_ENVIRONMENT_RUNNING') == null ? "--force-recreate" : ""
        executeDockerCompose("up -d $forceRecreate")
        def endpoint = executeDockerCompose("port app 8080")
        if (endpoint == "") {
            throw new IllegalStateException("Failed to execute 'docker-compose up'")
        }
        logger.lifecycle("Waiting for http://{} to respond", endpoint)
        waitForAppReadyAt endpoint
    }
}

task stopSystemTestEnvironment {
    description 'docker-compose stop'
    group 'System test'
    doLast {
        executeDockerCompose("stop")
    }
}

task downSystemTestEnvironment {
    description 'docker-compose down'
    group 'System test'
    doLast {
        executeDockerCompose("down -v")
    }
}
clean.dependsOn downSystemTestEnvironment

task psSystemTestEnvironment {
    description 'docker-compose ps'
    group 'System test'
    doLast {
        logger.lifecycle executeDockerCompose("ps")
    }
}

task logsSystemTestEnvironment {
    description 'docker-compose logs'
    group 'System test'
    doLast {
        executeDockerCompose("logs")
    }
}

systemTest {
    description 'Runs end-to-end tests against Codekvast Warehouse in a Docker container'
    group 'System test'
    dependsOn frontendInstall, startSystemTestEnvironment
    shouldRunAfter integrationTest

    def failures = 0

    afterTest { descriptor, result ->
        logger.debug("test={}, result={}", descriptor, result)
        failures += result.failedTestCount
    }

    doFirst {
        def endpoint = executeDockerCompose("port app 8080")
        logger.lifecycle("Running system tests against http://{}", endpoint)

        "chmod +x ${configurations.chromeDriver.asPath}".execute().waitFor()

        systemProperty 'phantomjs.binary.path', file('src/webapp/node_modules/phantomjs-prebuilt/bin/phantomjs').absolutePath
        systemProperty "geb.driver", "org.openqa.selenium.phantomjs.PhantomJSDriver"

        systemProperty "geb.build.reportsDir", "$reportsDir/geb"
        systemProperty 'geb.build.baseUrl', "http://$endpoint"

        systemProperty 'expectedCodekvastVersion', codekvastDisplayVersion
        environment['CODEKVAST_VERSION'] = codekvastDisplayVersion
    }

    doLast {
        if (failures == 0 && System.getenv('LEAVE_SYSTEM_TEST_ENVIRONMENT_RUNNING') == null) {
            logger.lifecycle("Removing system test environment")
            executeDockerCompose("down -v")
        }
    }
}

String executeDockerCompose(String args) {
    def command = "src/docker/codekvast-warehouse.sh $args"
    def process = command.execute([
            "WAREHOUSE_VERSION=$codekvastDisplayVersion",
            "WAREHOUSE_CONTAINER_PREFIX=warehousesystest",
            "WAREHOUSE_API_PORT=0",
            "WAREHOUSE_RESTART_POLICY='on-failure:10'",
            "WAREHOUSE_INPUT_DIR=",
            "WAREHOUSE_LOG_DIR=",
            "WAREHOUSE_DATABASE_DIR=",
            "WAREHOUSE_VOLUME_SEPARATOR="
    ], projectDir)
    def rc = process.waitFor()
    def stderr = process.err.text.trim()
    def stdout = process.in.text.trim()
    if (rc != 0) {
        throw new IllegalStateException("Failed to execute docker-compose $args: $stderr")
    }
    logger.info("Result of {}: {}", command, stdout)
    return stdout
}

def waitForAppReadyAt(String endpoint) {
    def url = "http://" + endpoint
    logger.debug("Trying to to GET {}", url)

    int numberOfAttempts = 60
    int remainingAttempts = numberOfAttempts
    while (true) {
        try {
            def text = new URL(url).text
            return
        } catch (ignored) {
            logger.debug("Failed to get {}, will try {} more times.", url, remainingAttempts)
        }
        remainingAttempts -= 1
        if (remainingAttempts == 0) {
            throw new IllegalStateException(url + " did not respond within " + numberOfAttempts + " seconds")
        }
        sleep(1000)
    }
}

check.dependsOn systemTest
