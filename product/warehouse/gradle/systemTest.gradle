// --- End-to-end system test -----------------------------------------------------------------------------------

testSets {
    systemTest
}

systemTest.dependsOn test, npmTest
check.dependsOn systemTest

dependencies {
    systemTestCompileOnly lombok

    systemTestCompile project(':product:support:testsupport')
    systemTestCompile 'net.serenity-bdd:serenity-core:1.1.36'
    systemTestCompile 'net.serenity-bdd:serenity-junit:1.1.36'

    systemTestRuntime 'com.codeborne:phantomjsdriver:1.3.0'
}

task startSystemTestEnvironment {
    description 'docker-compose up'
    group 'System test'
    dependsOn ':product:warehouse:distDocker'
    doLast {
        executeDockerCompose("up -d --force-recreate")
        def endpoint = executeDockerCompose("port app 8080")
        logger.lifecycle("Waiting for http://{} to respond", endpoint)
        waitForAppReadyAt endpoint
    }
}

task stopSystemTestEnvironment {
    description 'docker-compose stop'
    group 'System test'
    doLast {
        executeDockerCompose("stop")
    }
}

task downSystemTestEnvironment {
    description 'docker-compose down'
    group 'System test'
    doLast {
        executeDockerCompose("down")
    }
}
clean.dependsOn downSystemTestEnvironment

task psSystemTestEnvironment {
    description 'docker-compose ps'
    group 'System test'
    doLast {
        logger.lifecycle executeDockerCompose("ps")
    }
}

task logsSystemTestEnvironment {
    description 'docker-compose logs'
    group 'System test'
    doLast {
        executeDockerCompose("logs")
    }
}

systemTest {
    description 'Runs function tests against Codekvast Warehouse in a Docker container'
    group 'System test'
    dependsOn npmInstall, startSystemTestEnvironment
    shouldRunAfter integrationTest

    def failures = 0;

    afterTest { descriptor, result ->
        logger.debug("test={}, result={}", descriptor, result)
        failures += result.failedTestCount;
    }

    doFirst {
        def endpoint = executeDockerCompose("port app 8080")
        logger.lifecycle("Running system tests against http://{}", endpoint)

        systemProperty 'phantomjs.binary.path', file('src/webapp/node_modules/phantomjs-prebuilt/bin/phantomjs').absolutePath
        systemProperty 'expectedCodekvastVersion', codekvastDisplayVersion
        systemProperty 'webdriver.base.url', "http://$endpoint"
        systemProperty 'properties', file('src/systemTest/resources/serenity.properties').absolutePath
        environment['CODEKVAST_VERSION'] = codekvastDisplayVersion
    }

    doLast {
        if (failures == 0) {
            logger.lifecycle("Stopping system test environment")
            executeDockerCompose("stop")
        }
    }
}

def String executeDockerCompose(String args) {
    def command = "docker-compose -p warehouse-systest -f src/systemTest/resources/docker-compose.yml $args"
    def process = command.execute(["CODEKVAST_VERSION=$codekvastDisplayVersion"], projectDir)
    assert process.waitFor() == 0
    def result = process.in.text.trim()
    logger.info("Result of {}: {}", command, result)
    return result
}

def waitForAppReadyAt(String endpoint) {
    def url = "http://" + endpoint
    logger.debug("Trying to to GET {}", url)

    int numberOfAttempts = 30;
    int remainingAttempts = numberOfAttempts;
    while (true) {
        try {
            def text = new URL(url).text
            return
        } catch (ignored) {
            logger.debug("Failed to get {}, will try {} more times.", url, remainingAttempts );
        }
        remainingAttempts -= 1;
        if (remainingAttempts == 0) {
            throw new IllegalStateException(url + " did not respond within " + numberOfAttempts + " seconds")
        }
        sleep(1000);
    }
}

check.dependsOn systemTest
