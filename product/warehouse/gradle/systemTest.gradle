// --- End-to-end system test -----------------------------------------------------------------------------------

testSets {
    systemTest
}

systemTest.dependsOn test, npmTest
check.dependsOn systemTest

dependencies {
    systemTestCompileOnly lombok

    systemTestCompile project(':product:support:testsupport')
    systemTestCompile 'net.serenity-bdd:serenity-core:1.1.36'
    systemTestCompile 'net.serenity-bdd:serenity-junit:1.1.36'

    systemTestRuntime 'com.codeborne:phantomjsdriver:1.3.0'
}

task startSystemTestEnvironment {
    description 'docker-compose up'
    group 'System test'
    dependsOn ':product:warehouse:distDocker'
    doLast {
        executeDockerCompose("up -d --force-recreate")
    }
}

task stopSystemTestEnvironment {
    description 'docker-compose stop'
    group 'System test'
    doLast {
        executeDockerCompose("stop")
    }
}

task downSystemTestEnvironment {
    description 'docker-compose down'
    group 'System test'
    doLast {
        executeDockerCompose("down")
    }
}
clean.dependsOn downSystemTestEnvironment

task psSystemTestEnvironment {
    description 'docker-compose ps'
    group 'System test'
    doLast {
        logger.lifecycle executeDockerCompose("ps")
    }
}

task logsSystemTestEnvironment {
    description 'docker-compose logs'
    group 'System test'
    doLast {
        executeDockerCompose("logs")
    }
}

systemTest {
    description 'Runs function tests against Codekvast Warehouse in a Docker container'
    group 'System test'
    dependsOn npmInstall, startSystemTestEnvironment
    // finalizedBy stopSystemTestEnvironment
    shouldRunAfter integrationTest

    doFirst {
        def endpoint = executeDockerCompose("port app 8080")
        logger.lifecycle("Waiting for {}", endpoint)
        waitForPortOpenAt endpoint

        logger.lifecycle("Running system tests against {}", endpoint)

        systemProperty 'phantomjs.binary.path', file('src/webapp/node_modules/phantomjs-prebuilt/bin/phantomjs').absolutePath
        systemProperty 'expectedCodekvastVersion', codekvastDisplayVersion
        systemProperty 'webdriver.base.url', "http://$endpoint"
        systemProperty 'properties', file('src/systemTest/resources/serenity.properties').absolutePath
        environment['CODEKVAST_VERSION'] = codekvastDisplayVersion
    }
}

def String executeDockerCompose(String args) {
    def command = "docker-compose -p warehouse-systest -f src/systemTest/resources/docker-compose.yml $args"
    def process = command.execute(["CODEKVAST_VERSION=$codekvastDisplayVersion"], projectDir)
    assert process.waitFor() == 0
    def result = process.in.text.trim()
    logger.info("Result of {}: {}", command, result)
    return result
}

def waitForPortOpenAt(String endpoint) {
    String[] parts = endpoint.split(':')
    Socket socket = new Socket()
    socket.connect(new InetSocketAddress(parts[0], Integer.parseInt(parts[1])), 15_000);
    socket.close()
    sleep(2000)
}

check.dependsOn systemTest
