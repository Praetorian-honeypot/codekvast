import groovy.sql.Sql

import java.sql.Driver
import java.sql.DriverManager
import java.sql.SQLNonTransientConnectionException

// --- End-to-end system test -----------------------------------------------------------------------------------

testSets {
    systemTest
}

systemTest.dependsOn test, frontendTest
check.dependsOn systemTest

configurations {
    chromeDriver
    // geckoDriver
    jdbc
}

def seleniumVersion = '3.4.0'
ext.workDir = file("$buildDir/tmp/systemTest")

dependencies {
    systemTestCompileOnly lombok

    systemTestCompile project(':product:testsupport')
    systemTestCompile 'org.gebish:geb-spock:1.1.1'
    systemTestCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    systemTestCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"

    systemTestRuntime "com.codeborne:phantomjsdriver:1.4.3"
    systemTestRuntime "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    systemTestRuntime "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    systemTestRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    systemTestRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

    chromeDriver 'com.github.igor-suhorukov:chromedriver:2.27:linux64@bin'
    // geckoDriver '???'
    jdbc mariadbDriver
}

task startSystemTestEnvironment {
    description 'Starts the system test environment'
    group 'System test'
    dependsOn systemTestClasses

    inputs.dir file("src/systemTest")
    outputs.dir file("build/reports/systemTest")
    outputs.dir file("build/test-results/systemTest")

    doLast {
        def command = 'docker pull mariadb:10'
        logger.lifecycle(command)
        assert command.execute().waitFor() == 0

        def jdbcPort = allocateFreePort()
        command = 'docker run -d --restart=unless-stopped ' +
            "--name codekvast_systest_$jdbcPort " +
            "-p $jdbcPort:3306 " +
            '-e MYSQL_ROOT_PASSWORD=root ' +
            '-e MYSQL_DATABASE=codekvast ' +
            '-e MYSQL_USER=codekvast ' +
            '-e MYSQL_PASSWORD=codekvast ' +
            '-e TERM=xterm-256color ' +
            'mariadb:10 ' +
            '--character-set-server=utf8 ' +
            '--collation-server=utf8_general_ci ' +
            '--default-storage-engine=innodb '
        logger.lifecycle(command)
        assert command.execute().waitFor() == 0

        def jdbcUrl = "jdbc:mariadb://localhost:$jdbcPort/codekvast"
        logger.lifecycle("jdbcUrl={}", jdbcUrl)

        waitForDatabaseReady(jdbcUrl)

        project.ext.systemTestPort = allocateFreePort()
        command = "java -jar $buildDir/libs/codekvast-warehouse-${codekvastVersion}-all.jar --server.port=${systemTestPort} --spring.datasource.url=$jdbcUrl"

        launchAppAndWaitForReady(command)
    }
}

int allocateFreePort() {
    ServerSocket socket = null
    try {
        socket = new ServerSocket(0)
        return socket.getLocalPort()
    } finally {
        socket.close()
    }
}

def waitForDatabaseReady(jdbcUrl) {
    URLClassLoader loader = GroovyObject.class.classLoader
    configurations.jdbc.each { File file ->
        loader.addURL(file.toURI().toURL())
    }
    Class driver = loader.loadClass('org.mariadb.jdbc.Driver')
    Driver instance = driver.newInstance()
    DriverManager.registerDriver(instance)

    int attempt = 1
    while (attempt <= 60) {
        try {
            logger.lifecycle("Waiting for {} #{}", jdbcUrl, attempt)
            def sql = Sql.newInstance(jdbcUrl, 'codekvast', 'codekvast')

            sql.eachRow('SHOW TABLES') { row ->
                logger.lifecycle("row={}", row[0])
            }
            return
        } catch (SQLNonTransientConnectionException e) {
            logger.debug("Exception=" + e)

            attempt += 1
            sleep(1000)
        }
    }
}

task stopSystemTestEnvironment {
    description 'Stop system test environment'
    group 'System test'

    doLast {
        file("src/systemTest/stop-system-test-environment.sh").absolutePath.execute()
    }
}

systemTest {
    description 'Runs end-to-end tests against Codekvast Warehouse with MariaDB in a Docker container'
    group 'System test'
    dependsOn frontendInstall, bootRepackage, startSystemTestEnvironment
    shouldRunAfter integrationTest

    inputs.files startSystemTestEnvironment.inputs.files
    outputs.files startSystemTestEnvironment.outputs.files


    def failures = 0

    afterTest { descriptor, result ->
        logger.debug("test={}, result={}", descriptor, result)
        failures += result.failedTestCount
    }

    doFirst {
        def endpoint = "http://localhost:${project.systemTestPort}"
        logger.lifecycle("Running system tests against http://{}", endpoint)

        "chmod +x ${configurations.chromeDriver.asPath}".execute().waitFor()

        // PhantomJS
        systemProperty "geb.driver", "org.openqa.selenium.phantomjs.PhantomJSDriver"

        // Chrome
        // TODO: switch from PhantomJS to headless Chrome
        // systemProperty "geb.driver", "org.openqa.selenium.chrome.ChromeDriver"
        // systemProperty "webdriver.chrome.driver", configurations.chromeDriver.asPath

        // Firefox
        // systemProperty "geb.driver", "org.openqa.selenium.firefox.FirefoxDriver"
        // systemProperty "webdriver.gecko.driver", configurations.geckoDriver.asPath

        systemProperty "geb.build.reportsDir", "$reportsDir/systemTest/dumps"
        systemProperty 'geb.build.baseUrl', "http://$endpoint"

        systemProperty 'expectedCodekvastVersion', codekvastDisplayVersion
        environment['CODEKVAST_VERSION'] = codekvastDisplayVersion
    }

    doLast {
        // stop system test environment
    }
}

def launchAppAndWaitForReady(String command) {
    logger.lifecycle(command)
    def process = command.execute()
    sleep 5000

    int attempt = 1

    while (attempt <= 60) {
        assert process.isAlive()

        def url = "http://localhost:${project.systemTestPort}"
        logger.lifecycle("Waiting for {} #{}", url, attempt)

        try {
            def text = new URL(url).text
            return
        } catch (ignored) {
            logger.debug("Failed to get {}, will try {} more times.", url, 60 - attempt)
        }
        attempt += 1
        sleep(1000)
    }
    throw new IllegalStateException(url + " did not respond within 60 seconds")
}

check.dependsOn systemTest

