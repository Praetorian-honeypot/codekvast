apply from: "$rootDir/gradle/java-8.gradle"
apply from: "$rootDir/gradle/license.gradle"
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'flyway'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'spring-boot'

description = 'The central Codekvast warehouse'
applicationName = 'codekvast-warehouse'
archivesBaseName = 'codekvast-warehouse'
version = project.parent.parent.version
group = "crisp"
mainClassName = 'se.crisp.codekvast.warehouse.CodekvastWarehouse'

testSets {
    integrationTest
}
integrationTest.dependsOn test
check.dependsOn integrationTest

configurations {
    springLoaded
}

def webjars = [
        'org.webjars:angular-ui-bootstrap:1.2.5',
        'org.webjars:angularjs:1.5.3',
        'org.webjars:bootstrap:3.3.6',
        'org.webjars:jquery:2.2.2',
        'org.webjars:lodash:4.0.0',
]

def springfoxVersion = '2.4.0'

dependencies {
    compileOnly lombok
    compile project(':product:agent:agent-lib')
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.opencsv:opencsv:$opencsvVersion"
    compile 'javax.inject:javax.inject:1'
    compile 'org.flywaydb:flyway-core'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile "io.springfox:springfox-swagger2:${springfoxVersion}"

    runtime 'org.springframework.boot:spring-boot-starter-actuator'
    runtime 'org.springframework.boot:spring-boot-starter-thymeleaf'
    runtime "io.springfox:springfox-swagger-ui:${springfoxVersion}"

    runtime mariadbDriver
    runtime webjars

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    integrationTestCompile project(':product:support:testsupport')
    integrationTestCompileOnly lombok

    springLoaded springLoadedAgent
}

processResources {
    from "src/main/resources", {
        include "*application*.properties"
        expand(project.properties)
    }
    from "src/main/resources", {
        exclude "*application*.properties"
    }
}

flyway {
    url = 'jdbc:mariadb://localhost/codekvast_warehouse'
    user = 'codekvast'
    password = 'codekvast'
    validateOnMigrate = false
}

//--- Packaging ------------------------------------------------------------------------------------------------------------------
springBoot {
    executable = true
    embeddedLaunchScriptProperties = [
            'initInfoProvides'        : applicationName,
            'initInfoShortDescription': 'Codekvast Warehouse',
            'initInfoDescription'     : 'Codekvast Warehouse aggregates data from many Codekvast Daemons',
    ]
    excludeDevtools = true
}

bootRepackage {
    // Set a classifier, or else gradle distZip will overwrite the repackaged jar...
    classifier = 'all'
}

//--- Run & bootRun -----------------------------------------------------------------------------------------------------
run {
    jvmArgs = ['-ea']

    args = [
            "--logging.file=$buildDir/log/${applicationName}.log",
            '--codekvast.importPathPollIntervalSeconds=10',
    ]
}

bootRun {
    jvmArgs = [
            "-javaagent:${configurations.springLoaded.asPath}",
            '-noverify',
            '-Dspring.messages.cacheSeconds=1'
    ] + run.jvmArgs

    args = run.args
}

//--- Docker ---------------------------------------------------------------------------------------
distDocker {
    baseImage 'java:8-jre'
    maintainer 'Olle Hallin "olle.hallin@crisp.se"'
    runCommand 'mkdir -p /var/log /tmp/codekvast'
    volume '/var/log'
    volume '/tmp/codekvast'
    tagVersion 'latest'

    dependsOn check
}

task tagDockerImageWithLatest(type: Exec) {
    description "Assigns version tags the latest Docker image"
    group "Docker"
    commandLine "$projectDir/tagDockerImage.sh"
}

task pushDockerImage(type: Exec) {
    description "Pushes the codekvast-warehouse Docker image to Docker hub"
    group "Docker"
    commandLine "$projectDir/pushToDockerHub.sh"
    dependsOn tagDockerImageWithLatest
}

//--- TypeScript -----------------------------------------------------------------------------------
task npmInstall(type: Exec) {
    commandLine 'npm', 'install'

    inputs.file file('package.json')
    inputs.file file('typings.json')
    outputs.dir file('node_modules')
    outputs.dir file('typings')
}

task compileTypeScript(type: Exec) {
    inputs.file 'src/main/webapp/package.json'
    inputs.file 'src/main/webapp/tsconfig.json'
    inputs.file 'src/main/webapp/typings.json'
    inputs.file 'src/main/webapp/index.html'
    inputs.dir 'src/main/webapp/src'

    outputs.dir 'src/main/webapp/app'

    workingDir 'src/main/webapp'
    executable 'node_modules/.bin/tsc'
}

jar {
    into('static/app') {
        from(compileTypeScript.outputs) {
            exclude '**/*.js.map'
        }
    }

    into('static/css') {
        from('src/main/webapp/css') {

        }
    }

    into('static') {
        from('src/main/webapp') {
            // TODO: filter index.html to contain build info
            include '**.*.html'
        }
    }

    into('static/node_modules') {
        from('src/main/webapp/node_modules') {
            include 'es6-shim/es6-shim/es6-shim.min.js'
            include 'systemjs/dist/system-polyfills.js'
            include 'angular2/es6/dev/src/testing/shims_for_IE.js'
            include 'angular2/bundles/angular2-polyfills.js'
            include 'systemjs/dist/system.src.js'
            include 'rxjs/bundles/Rx.js'
            include 'angular2/bundles/angular2.dev.js'
        }
    }
}
