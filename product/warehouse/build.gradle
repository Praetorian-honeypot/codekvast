import org.apache.tools.ant.filters.ReplaceTokens

apply from: "$rootDir/gradle/java-8.gradle"
apply from: "$rootDir/gradle/license.gradle"
apply plugin: 'flyway'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'

description = 'The central Codekvast warehouse'
applicationName = 'codekvast-warehouse'
archivesBaseName = 'codekvast-warehouse'
version = project.parent.version
group = "crisp"
mainClassName = 'se.crisp.codekvast.warehouse.CodekvastWarehouse'

configurations {
    springLoaded
}

def webjars = [
        'org.webjars:angular-ui-bootstrap:0.14.3',
        'org.webjars:angularjs:1.4.8',
        'org.webjars:bootstrap:3.3.6',
        'org.webjars:jquery:2.1.4',
        'org.webjars:lodash:3.10.1',
]

dependencies {
    compile lombok
    compile project(':product:agent:agent-lib')
    compile project(':product:support:websupport')
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.opencsv:opencsv:$opencsvVersion"
    compile 'javax.inject:javax.inject:1'
    compile 'org.flywaydb:flyway-core'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-web'

    runtime 'ch.qos.logback:logback-classic'
    runtime 'org.mariadb.jdbc:mariadb-java-client:1.3.3'
    runtime webjars

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    springLoaded springLoadedAgent
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/application.properties'
        filter(ReplaceTokens, tokens: gitVersionTokens + ['gradle.name'          : archivesBaseName,
                                                          'gradle.description'   : project.description,
                                                          'gradle.version'       : project.version,
                                                          'gradle.displayVersion': codekvastDisplayVersion]
        )
    }
}

flyway {
    url = 'jdbc:mysql://localhost/codekvast_warehouse'
    user = 'codekvast'
    password = 'codekvast'
    locations = [
            'classpath:/database/migration',
            'classpath:/se/crisp/codekvast/warehouse/migration',
    ]
}

//--- Packaging ------------------------------------------------------------------------------------------------------------------
springBoot {
    executable = true
    embeddedLaunchScriptProperties = [
            'initInfoProvides'        : applicationName,
            'initInfoShortDescription': 'Codekvast Warehouse',
            'initInfoDescription'     : 'Codekvast Warehouse aggregates data from many Codekvast Daemons',
    ]
    excludeDevtools = true
}

bootRepackage {
    // Set a classifier, or else gradle distZip will overwrite the repackaged jar...
    classifier = 'all'
}

//--- Run & bootRun -----------------------------------------------------------------------------------------------------
run {
    jvmArgs = ['-ea']

    args = [
            "--logging.file=$buildDir/log/${applicationName}.log",
            '--codekvast.importPathPollIntervalSeconds=10',
    ]
}

bootRun {
    jvmArgs = [
            "-javaagent:${configurations.springLoaded.asPath}",
            '-noverify',
            '-Dspring.messages.cacheSeconds=1'
    ] + run.jvmArgs

    args = run.args
}

// --- Coverage -------------------------------------------------------------------------------------------------------
jacoco {
    applyTo run
}

task coverageReport(type: JacocoReport) {
    group 'Documentation'
    description 'Generates a test coverage report'
    sourceSets sourceSets.main

    // One could do
    // executionData test, run
    // but then *all* of build/jacoco/test.exec and run.exec  must exist, or else the report will be skipped.
    // Instead, build a report on what execution data we happen to have.

    enabled = false
    def jacocoDir = file('build/jacoco')
    if (jacocoDir.exists()) {
        jacocoDir.eachFileMatch(~/.*\.exec/) { executionData it; enabled = true }
    }

    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}
build.dependsOn coverageReport

//--- Docker ---------------------------------------------------------------------------------------
task tagDockerImageWithLatest(type: Exec) {
    commandLine "$projectDir/tagDockerImageWithLatest.sh"
}

distDocker {
    baseImage 'java:8-jre'
    maintainer 'Olle Hallin "olle.hallin@crisp.se"'
    runCommand 'mkdir -p /var/log /tmp/codekvast'
    volume '/var/log'
    volume '/tmp/codekvast'
    tagVersion version
}
distDocker.finalizedBy tagDockerImageWithLatest
