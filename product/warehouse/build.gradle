import org.apache.tools.ant.filters.ReplaceTokens

apply from: "$rootDir/gradle/java-8.gradle"
apply from: "$rootDir/gradle/sources-javadoc.gradle"
apply from: "$rootDir/gradle/license.gradle"
apply plugin: 'flyway'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'

description = 'The central Codekvast warehouse'
applicationName = 'codekvast-warehouse'
archivesBaseName = 'codekvast-warehouse'
version = project.parent.version
group = "crisp"
mainClassName = 'se.crisp.codekvast.warehouse.CodekvastWarehouseApplication'

configurations {
    springLoaded
}

sourceSets {
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
    }
}

dependencies {
    compile lombok
    compile project(':product:support:commons')
    compile project(':product:agent:agent-lib')

    compile 'javax.inject:javax.inject:1'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.flywaydb:flyway-core'
    compile "com.opencsv:opencsv:$opencsvVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    runtime 'ch.qos.logback:logback-classic'
    runtime 'org.mariadb.jdbc:mariadb-java-client:1.3.0'

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    integTestCompile sourceSets.main.output
    integTestCompile sourceSets.test.output
    integTestCompile configurations.testCompile
    integTestRuntime configurations.testRuntime

    springLoaded springLoadedAgent
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/application.properties'
        filter(ReplaceTokens, tokens: gitVersionTokens + ['gradle.name'          : archivesBaseName,
                                                          'gradle.description'   : project.description,
                                                          'gradle.version'       : project.version,
                                                          'gradle.displayVersion': codekvastDisplayVersion]
        )
    }
}

task integTest(type: Test) {
    group = 'Verification'
    description = 'Runs all integration tests'
    dependsOn test

    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath

    reports.html.destination file('build/reports/integTest')
}

check.dependsOn integTest

applicationDistribution.from('src/main/resources') {
    into 'conf'
    include 'logback.xml', 'default.properties'
    rename {
        def name = it == 'default.properties' ? 'codekvast-warehouse.properties' : it
        "${name}.sample.${version}"
    }
}

startScripts {
    doLast {
        logger.info 'Adjusting start scripts...'
        windowsScript.text = windowsScript.text
                .replace('CLASSPATH=%APP_HOME%\\lib', 'CLASSPATH=%APP_HOME%\\conf\\;%APP_HOME%\\lib')
        unixScript.text = unixScript.text
                .replace('APP_HOME=', 'export APP_HOME=')
                .replace('CLASSPATH=$APP_HOME/lib', 'CLASSPATH=$APP_HOME/conf/:$APP_HOME/lib')
    }
}

flyway {
    url = 'jdbc:mysql://localhost/codekvast_warehouse'
    user = 'codekvast'
    password = 'codekvast'
    locations = [
            'classpath:/database/migration',
            'classpath:/se/crisp/codekvast/warehouse/migration',
    ]
}

run {
    jvmArgs = [
            '-ea',
            '-Dcodekvast.log.consoleThreshold=DEBUG',
    ]
    args = [
            '--codekvast.importPath=/tmp/codekvast/.export', // same as daemon export to when started from Gradle
            '--codekvast.importPathPollIntervalSeconds=10',

            // During test
            // '--codekvast.importPath=/home/qolha/Dropbox/Kund/Transmode/codekvast',
            // '--codekvast.deleteImportedFiles=false',
    ]
}

bootRun {
    jvmArgs = [
            "-javaagent:${configurations.springLoaded.asPath}",
            '-noverify',
            '-Dspring.thymeleaf.cache=false',
            '-Dspring.messages.cacheSeconds=1'
    ] + run.jvmArgs

    args = run.args
}

jacoco {
    applyTo run
}

task coverageReport(type: JacocoReport) {
    group 'Documentation'
    description 'Generates a test coverage report'
    sourceSets sourceSets.main

    // One could do
    // executionData integTest, run
    // but then *all* of build/jacoco/integTest.exec and run.exec  must exist, or else the report will be skipped.
    // Instead, build a report on what execution data we happen to have.

    enabled = false
    def jacocoDir = file('build/jacoco')
    if (jacocoDir.exists()) {
        jacocoDir.eachFileMatch(~/.*\.exec/) { executionData it; enabled = true }
    }

    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}
build.dependsOn coverageReport

distDocker {
    maintainer 'Olle Hallin "olle.hallin@crisp.se"'
    runCommand 'mkdir -p /var/log/codekvast'
    volume '/var/log/codekvast'
    volume '/tmp/codekvast'
    tagVersion version
}
