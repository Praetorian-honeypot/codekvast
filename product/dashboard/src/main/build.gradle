// --- Rapid Application Development ------------------------------------------------------------------------------------------

task startMariadb {
    description 'Starts MariaDB 10 in a Docker container, on port 3306'
    group 'Backend Development'

    outputs.upToDateWhen {
        "docker ps".execute().in.text.contains("codekvast_database")
    }

    doLast {
        def created = "docker ps -a".execute().in.text.contains("codekvast_database")
        if (created) {
            def command = "docker start codekvast_database"
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0
        } else {
            def command = 'docker pull mariadb:10'
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0

            command = 'docker run -d --restart=unless-stopped ' +
                '--name codekvast_database ' +
                '-p 3306:3306 ' +
                '-e MYSQL_ROOT_PASSWORD=root ' +
                '-e MYSQL_DATABASE=codekvast ' +
                '-e MYSQL_USER=codekvast ' +
                '-e MYSQL_PASSWORD=codekvast ' +
                '-e TERM=xterm-256color ' +
                'mariadb:10 ' +
                '--character-set-server=utf8 ' +
                '--collation-server=utf8_general_ci ' +
                '--default-storage-engine=innodb '
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0
        }
    }
}

flyway {
    url = 'jdbc:mariadb://localhost/codekvast'
    user = 'codekvast'
    password = 'codekvast'
    validateOnMigrate = false
}

//--- Run & bootRun -----------------------------------------------------------------------------------------------------

// configurations {
//     codekvastagent
// }
//
// dependencies {
//     runtime aspectjWeaver
//     codekvastagent project(path: ":product:java-agent", configuration: 'shadow')
// }
//
// task generateCodekvastConfig {
//     group "Build"
//     description "Generates a codekvast.conf for test"
//
//     def configFile = file("$buildDir/codekvast.conf")
//
//     inputs.file file("build.gradle")
//     outputs.file configFile
//
//     doLast {
//         configFile.parentFile.mkdirs()
//         configFile.text = """# Run Codekvast against Sample App
// appName = $archivesBaseName
// appVersion = literal $codekvastVersion
// # aspectjOptions = -verbose -showWeaveInfo
// codeBase = ${file("build/install/${archivesBaseName}/lib/")}
// methodVisibility = all
// packages = io.codekvast
// """
//     }
// }
//
// processResources.dependsOn generateCodekvastConfig


run {
    group "Backend Development"
    // dependsOn startMariadb, ":product:dashboard:frontendBuild", installDist, generateCodekvastConfig, ':product:java-agent:shadowJar'
    dependsOn startMariadb, ":product:dashboard:frontendBuild"

    jvmArgs = [
        '-ea',
        // "-Dcodekvast.configuration=$generateCodekvastConfig.outputs.files.asPath",
    ]

    args = ["--logging.file=$buildDir/log/${applicationName}.log",
            '--codekvast.fileImportIntervalSeconds=10',
            '--codekvast.herokuCodekvastUrl=http://localhost:8080',
            // '--codekvast.webappJwtSecret=secret',
            '--codekvast.webappJwtExpirationSeconds=15',
            '--spring.resources.staticLocations=' +
                "file:$projectDir/src/webapp/dist/," +
                'classpath:/META-INF/resources']
}

bootRun {
    group "Backend Development"
    dependsOn startMariadb

    jvmArgs = run.jvmArgs
    args = run.args
    addResources = true
}

//--- Packaging ------------------------------------------------------------------------------------------------------------------
springBoot {
    executable = true
    embeddedLaunchScriptProperties = [
        'initInfoProvides'        : applicationName,
        'initInfoShortDescription': 'Codekvast Dashboard',
        'initInfoDescription'     : 'Codekvast Dashboard aggregates data from many Codekvast Agents',
    ]
    excludeDevtools = true
}

bootRepackage {
    // Set a classifier, or else gradle distZip will overwrite the repackaged jar...
    classifier = 'all'
    dependsOn ":product:dashboard:frontendBuild"
}
