apply plugin: 'distribution'
apply plugin: 'org.kordamp.markdown.convert'

description = 'Package codekvast-agent.zip and uploads it to http://download.codekvast.io'

distributions {

    agent {
        baseName = "codekvast-agent-$codekvastVersion"
        contents {
            from(file('src/dist/codekvast.conf')) {
                into "/"
                expand(project.properties)
            }

            from([
                tasks.getByPath(':product:java-agent:javaagents'),
                file("$rootDir/RELEASE-NOTES.md"),
                file("$rootDir/LICENSE"),
            ]) {
                into "/codekvast"
            }
        }
    }
}

task fetchReleaseNotesMd(type: Sync) {
    from(rootDir) {
        include "RELEASE-NOTES.md"
    }
    into "$buildDir/markdown"
}

markdownToHtml {
    dependsOn fetchReleaseNotesMd
    sourceDir file("$buildDir/markdown")
    outputDir file("$buildDir/gen-html")
    inputEncoding 'UTF-8'
    outputEncoding 'UTF-8'
}

task createIndexHtml(type: Copy) {
    description "Creates index.html"
    group "publish"

    from file('src/html/index.html')
    into "$buildDir/gen-html"
    expand(project.properties)
}

task uploadToS3 {
    description "Uploads everything to $codekvastDownloadPrefix"
    group "publish"

    dependsOn agentDistZip, tasks.getByPath(':product:java-agent:javaagents'), markdownToHtml, createIndexHtml

    doLast {
        putToS3 "$rootDir/product/graphics/logo-feathers-60x104.png", 'assets/logo-feathers-60x104.png'
        putToS3 "$buildDir/distributions/codekvast-agent-${codekvastVersion}.zip", "codekvast-agent-${codekvastVersion}.zip"
        putToS3 "$rootDir/product/java-agent/build/javaagents/codekvast-javaagent-${codekvastVersion}.jar", "codekvast-agent-${codekvastVersion}.jar"
        putToS3 "$buildDir/gen-html/RELEASE-NOTES.html", 'RELEASE-NOTES.html'
        putToS3 "$buildDir/gen-html/index.html", 'index.html'
    }
}

def putToS3(src, dest) {
    def bucket = codekvastDownloadPrefix - 'http://' - 'https://'
    def command = "s3cmd --reduced-redundancy --force put ${src} s3://${bucket}/${dest}"
    logger.lifecycle(command)
    def result = command.execute().waitFor()
    assert result == 0: "Failed to execute $command";
}