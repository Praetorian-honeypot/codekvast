apply plugin: 'java'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'jacoco'

uptodate {
    connectionTimeout 20000
    addExcludedVersionPatterns '.*-alpha.*'
    addExcludedVersionPatterns '.*-rc.*'
    addExcludedVersionPatterns '.*-b[0-9]+$'
    addExcludedVersionPatterns '.*-[0-9]$'
}

jar {
    manifest {
        attributes(
                "Implementation-Title": archivesBaseName,
                "Implementation-Version": codekvastDisplayVersion
        )
    }
}

configurations.forEach { it ->
    def config = it
    def configName = config.name
    def taskName = "sync${configName.capitalize()}Dependencies"

    task "$taskName"(type: Sync) {
        group = "Support"
        description = "Syncs $configName dependencies into build/deps/$configName"

        from config
        into "$buildDir/deps/$configName"
    }
}

configurations.all {
    resolutionStrategy {

        eachDependency { details ->
            if (details.requested.name == 'groovy-all') {
                details.useTarget group: details.requested.group, name: 'groovy', version: details.requested.version
            }
        }
    }
}

task coverageReport(type: JacocoReport) {
    group 'Documentation'
    description 'Generates a test coverage report'
    sourceSets sourceSets.main

    // One could do
    // executionData test, integrationTest, run
    // but then *all* of build/jacoco/test.exec, integrationTest.exec and run.exec  must exist, or else the report will be skipped.
    // Instead, build a report on what execution data we happen to have.

    enabled = false
    def jacocoDir = file('build/jacoco')
    if (jacocoDir.exists()) {
        jacocoDir.eachFileMatch(~/.*\.exec/) { executionData it; enabled = true }
    }

    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }

}
build.dependsOn coverageReport
