apply plugin: 'java'

sourceSets {
    javaagent
}

defaultTasks 'run'

ext.tomcatDownloadUrl = "https://dl.bintray.com/crisp/codekvast/apache-tomcat-${tomcatVersion}.zip"
ext.tomcatDir = file("$buildDir/tomcat")
ext.catalinaBase = file("$tomcatDir/apache-tomcat-${tomcatVersion}")

ext.jenkinsDownloadUrl = "https://dl.bintray.com/crisp/codekvast/jenkins-${jenkinsVersion}.war"

task installJenkinsInTomcat7 {
    def downloadDir = file("$rootDir/.tmp/download")
    def webappsDir = new File(catalinaBase, "webapps")
    def jenkinsDir = new File(webappsDir, "jenkins")

    inputs.property "tomcatVersion", tomcatVersion
    inputs.property "tomcat", tomcatDownloadUrl
    inputs.property "jenkinsVersion", jenkinsVersion
    inputs.property "jenkins", jenkinsDownloadUrl
    inputs.file file("build.gradle")
    outputs.dir tomcatDir

    doLast {
        downloadDir.mkdirs()
        webappsDir.mkdirs()

        logger.lifecycle "Downloading $tomcatDownloadUrl ..."
        ant.get(
                src: tomcatDownloadUrl,
                dest: downloadDir,
                usetimestamp: true,
                verbose: true
        )

        logger.lifecycle "Unpacking Tomcat into $tomcatDir ..."
        copy {
            from zipTree("$downloadDir/apache-tomcat-${tomcatVersion}.zip")
            into tomcatDir
        }
        exec { commandLine "chmod", "+x", "$catalinaBase/bin/catalina.sh" }

        logger.lifecycle "Setting HTTP port $tomcatPort..."
        def serverXml = file("$catalinaBase/conf/server.xml")
        serverXml.text = serverXml.text.replace("8080", tomcatPort).replace("8005", "0").replace("8009", "0")

        logger.lifecycle "Downloading $jenkinsDownloadUrl into $downloadDir ..."
        ant.get(
                src: jenkinsDownloadUrl,
                dest: downloadDir,
                usetimestamp: true,
                verbose: true
        )

        logger.lifecycle "Copying jenkins.war into $webappsDir ..."
        copy {
            from "$downloadDir/jenkins-${jenkinsVersion}.war"
            into "$webappsDir"
            rename { "jenkins.war" }
        }

        if (jenkinsDir.exists()) {
            logger.lifecycle "Deleting old exploded jenkins dir..."
            delete jenkinsDir
        }
        logger.lifecycle "Jenkins downloaded and deployed to Tomcat."
    }
}

task generateCodekvastConfig {
    group "Build"
    description "Generates a codekvast.conf for test"
    dependsOn ":product:agent:collector:assemble"

    ext.configFile = file("$buildDir/codekvast.conf")

    inputs.file file("$rootDir/product/build.gradle")
    inputs.file file("build.gradle")
    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """# Run Codekvast against Jenkins in Tomcat
#aspectjOptions = -verbose -showWeaveInfo
appName = Jenkins
appVersion = manifest jenkins-cli.*\\\\.jar Jenkins-CLI-Version
aspectjOptions = -verbose
codeBase = $catalinaBase/webapps/jenkins, ${System.properties['user.home']}/.jenkins/plugins
collectorResolutionSeconds = 5
methodVisibility = private
packages = hudson, jenkins
tags = development, sample
verbose = true
"""
    }
}

processResources.dependsOn generateCodekvastConfig

task installJavaagentsIntoEndorsedDir(type: Sync) {
    description = 'Installs the Java agents into $catalinaBase/endorsed'
    group = "build"
    dependsOn = ["installJenkinsInTomcat7", ":product:agent:collector:javaagents"]

    from tasks.getByPath(":product:agent:collector:javaagents").outputs
    into "$catalinaBase/endorsed"
}

task generateTomcatRunHook {
    description = "Generates a setenv.sh in \$CATALINA_HOME/bin that hooks up Codekvast"
    group = "build"
    dependsOn = ["installJavaagentsIntoEndorsedDir", "generateCodekvastConfig"]
    def setenvFile = file("$catalinaBase/bin/setenv.sh")

    inputs.file file("build.gradle")
    outputs.file setenvFile

    doLast {
        def codekvastCollector = file("$catalinaBase/endorsed").listFiles().find { it.name.contains("codekvast") }
        def aspectjWeaver = file("$catalinaBase/endorsed").listFiles().find { it.name.contains("aspectj") }

        println """---------------------------
codekvastCollector = .${codekvastCollector.absolutePath - projectDir.absolutePath}
aspectjWeaver = .${aspectjWeaver.absolutePath - projectDir.absolutePath}
-------------------------"""
        setenvFile.text = """
CATALINA_OPTS=\"-Dcodekvast.configuration=$generateCodekvastConfig.configFile -javaagent:$codekvastCollector -javaagent:$aspectjWeaver\"
"""
    }
}

task run(type: Exec) {
    description = "Run Jenkins with Codekvast Collector attached"
    group = "application"
    dependsOn generateTomcatRunHook
    commandLine "$catalinaBase/bin/catalina.sh", "run"
}

