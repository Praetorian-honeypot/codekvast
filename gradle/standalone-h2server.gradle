buildscript {
    apply from: "$rootDir/gradle/buildscript.gradle", to: buildscript
}
apply plugin: 'flyway'
apply plugin: 'com.github.johnrengelman.processes'

import com.github.jengelman.gradle.plugins.processes.tasks.JavaFork

configurations {
    h2server
}

dependencies {
    h2server h2database
    h2server logback
}

task startDatabase(type: JavaFork) {
    description "Starts a H2 database server"
    group "Help"

    def mainClass = 'org.h2.tools.Server'

    outputs.upToDateWhen {
        ["jps", "-l"].execute().text.indexOf(mainClass) >= 0
    }

    classpath configurations.h2server.asPath
    workingDir buildDir
    main mainClass
    args = ['-tcp']
    // maxHeapSize = "100M"

    mkdir "$buildDir/log/"
    standardOutput = new PrintStream(new BufferedOutputStream(new FileOutputStream(file("$buildDir/log/h2-server.log"))))

    doFirst {
        // Make 'gradle clean startDatabase' work...
        mkdir "$buildDir/log/"
    }
}

task stopDatabase(type: JavaFork) {
    description "Stops the H2 database server"
    group "Help"

    def mainClass = 'org.h2.tools.Server'

    outputs.upToDateWhen {
        ["jps", "-l"].execute().text.indexOf(mainClass) < 0
    }

    classpath configurations.h2server.asPath
    workingDir buildDir
    main mainClass
    args = ['-tcpShutdown', 'tcp://localhost']
}

[flywayBaseline, flywayClean, flywayInfo, flywayInit, flywayMigrate, flywayRepair, flywayValidate]*.dependsOn startDatabase
